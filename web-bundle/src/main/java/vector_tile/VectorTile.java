// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/main/resources/vector_tile.proto

package vector_tile;

import com.google.protobuf.*;
import com.graphhopper.routing.ch.CHPreparationGraph;

import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;


@SuppressWarnings("java:S3776")
public final class VectorTile {
  private VectorTile() {}

  public interface TileOrBuilder extends
      // @@protoc_insertion_point(interface_extends:vector_tile.Tile)
      com.google.protobuf.GeneratedMessageV3.
          ExtendableMessageOrBuilder<Tile> {

    /**
     * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
     */
    java.util.List<vector_tile.VectorTile.Tile.Layer> 
        getLayersList();
    /**
     * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
     */
    vector_tile.VectorTile.Tile.Layer getLayers(int index);
    /**
     * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
     */
    int getLayersCount();
    /**
     * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
     */
    <T extends vector_tile.VectorTile.Tile.LayerOrBuilder> java.util.List<T> getLayersOrBuilderList();

    /**
     * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
     */
    vector_tile.VectorTile.Tile.LayerOrBuilder getLayersOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code vector_tile.Tile}
   */
  public  static final class Tile extends
      com.google.protobuf.GeneratedMessageV3.ExtendableMessage<
        Tile> implements
      // @@protoc_insertion_point(message_implements:vector_tile.Tile)
      TileOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Tile.newBuilder() to construct.
    private Tile(com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<vector_tile.VectorTile.Tile, ?> builder) {
      super(builder);
    }
    private Tile() {
      layers = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Tile(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutablebitfieldzero = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 26: {
              if ((mutablebitfieldzero & 0x00000001) != 0x00000001)
              
              {
                layers = new ArrayList<>();
                mutablebitfieldzero |= 0x00000001;
              }

              layers.add(input.readMessage(vector_tile.VectorTile.Tile.Layer.newBuilder().buildPartial().getParserForType(), extensionRegistry));
              break;
              }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutablebitfieldzero & 0x00000001) == 0x00000001)) {
          layers = java.util.Collections.unmodifiableList(layers);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vector_tile.VectorTile.internal_static_vector_tile_Tile_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vector_tile.VectorTile.internal_static_vector_tile_Tile_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              vector_tile.VectorTile.Tile.class, vector_tile.VectorTile.Tile.Builder.class);
    }

    /**
     * <pre>
     * GeomType is described in section 4.3.4 of the specification
     * </pre>
     *
     * Protobuf enum {@code vector_tile.Tile.GeomType}
     */
    public enum GeomType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>UNKNOWN = 0;</code>
       */
      UNKNOWN(0),
      /**
       * <code>POINT = 1;</code>
       */
      POINT(1),
      /**
       * <code>LINESTRING = 2;</code>
       */
      LINESTRING(2),
      /**
       * <code>POLYGON = 3;</code>
       */
      POLYGON(3),
      ;

      /**
       * <code>UNKNOWN = 0;</code>
       */
      public static final int UNKNOWN_VALUE = 0;
      /**
       * <code>POINT = 1;</code>
       */
      public static final int POINT_VALUE = 1;
      /**
       * <code>LINESTRING = 2;</code>
       */
      public static final int LINESTRING_VALUE = 2;
      /**
       * <code>POLYGON = 3;</code>
       */
      public static final int POLYGON_VALUE = 3;


      public final int getNumber() {
        return value;
      }


      public static GeomType valueOf(int value) {
        return forNumber(value);
      }

      public static GeomType forNumber(int value) {
        switch (value) {
          case 0: return UNKNOWN;
          case 1: return POINT;
          case 2: return LINESTRING;
          case 3: return POLYGON;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<GeomType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<GeomType> internalValueMap =
              GeomType::forNumber;


      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return vector_tile.VectorTile.Tile.getDescriptor().getEnumTypes().get(0);
      }

      private static final GeomType[] VALUES = values();

      public static GeomType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private GeomType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:vector_tile.Tile.GeomType)
    }

    public interface ValueOrBuilder extends
        // @@protoc_insertion_point(interface_extends:vector_tile.Tile.Value)
        com.google.protobuf.GeneratedMessageV3.
            ExtendableMessageOrBuilder<Value> {

      /**
       * <pre>
       * Exactly one of these values must be present in a valid message
       * </pre>
       *
       * <code>optional string string_value = 1;</code>
       */
      boolean hasStringValue();
      /**
       * <pre>
       * Exactly one of these values must be present in a valid message
       * </pre>
       *
       * <code>optional string string_value = 1;</code>
       */
      java.lang.String getStringValue();
      /**
       * <pre>
       * Exactly one of these values must be present in a valid message
       * </pre>
       *
       * <code>optional string string_value = 1;</code>
       */
      com.google.protobuf.ByteString
          getStringValueBytes();

      /**
       * <code>optional float float_value = 2;</code>
       */
      boolean hasFloatValue();
      /**
       * <code>optional float float_value = 2;</code>
       */
      float getFloatValue();

      /**
       * <code>optional double double_value = 3;</code>
       */
      boolean hasDoubleValue();
      /**
       * <code>optional double double_value = 3;</code>
       */
      double getDoubleValue();

      /**
       * <code>optional int64 int_value = 4;</code>
       */
      boolean hasIntValue();
      /**
       * <code>optional int64 int_value = 4;</code>
       */
      long getIntValue();

      /**
       * <code>optional uint64 uint_value = 5;</code>
       */
      boolean hasUintValue();
      /**
       * <code>optional uint64 uint_value = 5;</code>
       */
      long getUintValue();

      /**
       * <code>optional sint64 sint_value = 6;</code>
       */
      boolean hasSintValue();
      /**
       * <code>optional sint64 sint_value = 6;</code>
       */
      long getSintValue();

      /**
       * <code>optional bool bool_value = 7;</code>
       */
      boolean hasBoolValue();
      /**
       * <code>optional bool bool_value = 7;</code>
       */
      boolean getBoolValue();
    }
    /**
     * <pre>
     * Variant type encoding
     * The use of values is described in section 4.1 of the specification
     * </pre>
     *
     * Protobuf type {@code vector_tile.Tile.Value}
     */
    public  static final class Value extends
        com.google.protobuf.GeneratedMessageV3.ExtendableMessage<
          Value> implements
        // @@protoc_insertion_point(message_implements:vector_tile.Tile.Value)
        ValueOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Value.newBuilder() to construct.
      private Value(com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<vector_tile.VectorTile.Tile.Value, ?> builder) {
        super(builder);
      }
      private Value() {
        stringvalue = "";
        floatValue = 0F;
        doubleValue = 0D;
        intValue = 0L;
        uintvalue = 0L;
        sintValue = 0L;
        boolValue = false;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Value(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0 |= 0x00000001;
                stringvalue = bs;
                break;
              }
              case 21: {
                bitField0 |= 0x00000002;
                floatValue = input.readFloat();
                break;
              }
              case 25: {
                bitField0 |= 0x00000004;
                doubleValue = input.readDouble();
                break;
              }
              case 32: {
                bitField0 |= 0x00000008;
                intValue = input.readInt64();
                break;
              }
              case 40: {
                bitField0 |= 0x00000010;
                uintvalue = input.readUInt64();
                break;
              }
              case 48: {
                bitField0 |= 0x00000020;
                sintValue = input.readSInt64();
                break;
              }
              case 56: {
                bitField0 |= 0x00000040;
                boolValue = input.readBool();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vector_tile.VectorTile.internal_static_vector_tile_Tile_Value_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vector_tile.VectorTile.internal_static_vector_tile_Tile_Value_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                vector_tile.VectorTile.Tile.Value.class, vector_tile.VectorTile.Tile.Value.Builder.class);
      }

      private int bitField0;
      public static final int STRING_VALUE_FIELD_NUMBER = 1;
      private transient java.lang.Object stringvalue;

      /**
       * <pre>
       * Exactly one of these values must be present in a valid message
       * </pre>
       *
       * <code>optional string string_value = 1;</code>
       */
      public boolean hasStringValue() {
        return ((bitField0 & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Exactly one of these values must be present in a valid message
       * </pre>
       *
       * <code>optional string string_value = 1;</code>
       */
      public java.lang.String getStringValue() {
        java.lang.Object ref = stringvalue;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            stringvalue = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       * Exactly one of these values must be present in a valid message
       * </pre>
       *
       * <code>optional string string_value = 1;</code>
       */
      public com.google.protobuf.ByteString
          getStringValueBytes() {
        java.lang.Object ref = stringvalue;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stringvalue = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int FLOAT_VALUE_FIELD_NUMBER = 2;
      private float floatValue;
      /**
       * <code>optional float float_value = 2;</code>
       */
      public boolean hasFloatValue() {
        return ((bitField0 & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float float_value = 2;</code>
       */
      public float getFloatValue() {
        return floatValue;
      }

      public static final int DOUBLE_VALUE_FIELD_NUMBER = 3;
      private double doubleValue;
      /**
       * <code>optional double double_value = 3;</code>
       */
      public boolean hasDoubleValue() {
        return ((bitField0 & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional double double_value = 3;</code>
       */
      public double getDoubleValue() {
        return doubleValue;
      }

      public static final int INT_VALUE_FIELD_NUMBER = 4;
      private long intValue;
      /**
       * <code>optional int64 int_value = 4;</code>
       */
      public boolean hasIntValue() {
        return ((bitField0 & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int64 int_value = 4;</code>
       */
      public long getIntValue() {
        return intValue;
      }

      public static final int UINT_VALUE_FIELD_NUMBER = 5;
      private long uintvalue;
      /**
       * <code>optional uint64 uint_value = 5;</code>
       */
      public boolean hasUintValue() {
        return ((bitField0 & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint64 uint_value = 5;</code>
       */
      public long getUintValue() {
        return uintvalue;
      }

      public static final int SINT_VALUE_FIELD_NUMBER = 6;
      private long sintValue;
      /**
       * <code>optional sint64 sint_value = 6;</code>
       */
      public boolean hasSintValue() {
        return ((bitField0 & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional sint64 sint_value = 6;</code>
       */
      public long getSintValue() {
        return sintValue;
      }

      public static final int BOOL_VALUE_FIELD_NUMBER = 7;
      private boolean boolValue;
      /**
       * <code>optional bool bool_value = 7;</code>
       */
      public boolean hasBoolValue() {
        return ((bitField0 & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bool bool_value = 7;</code>
       */
      public boolean getBoolValue() {
        return boolValue;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!extensionsAreInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        com.google.protobuf.GeneratedMessageV3
          .ExtendableMessage<vector_tile.VectorTile.Tile.Value>.ExtensionWriter
            extensionWriter = newExtensionWriter();
        if (((bitField0 & 0x00000001) == 0x00000001)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, stringvalue);
        }
        if (((bitField0 & 0x00000002) == 0x00000002)) {
          output.writeFloat(2, floatValue);
        }
        if (((bitField0 & 0x00000004) == 0x00000004)) {
          output.writeDouble(3, doubleValue);
        }
        if (((bitField0 & 0x00000008) == 0x00000008)) {
          output.writeInt64(4, intValue);
        }
        if (((bitField0 & 0x00000010) == 0x00000010)) {
          output.writeUInt64(5, uintvalue);
        }
        if (((bitField0 & 0x00000020) == 0x00000020)) {
          output.writeSInt64(6, sintValue);
        }
        if (((bitField0 & 0x00000040) == 0x00000040)) {
          output.writeBool(7, boolValue);
        }
        extensionWriter.writeUntil(536870912, output);
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0 & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, stringvalue);
        }
        if (((bitField0 & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(2, floatValue);
        }
        if (((bitField0 & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(3, doubleValue);
        }
        if (((bitField0 & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(4, intValue);
        }
        if (((bitField0 & 0x00000010) == 0x00000010)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(5, uintvalue);
        }
        if (((bitField0 & 0x00000020) == 0x00000020)) {
          size += com.google.protobuf.CodedOutputStream
            .computeSInt64Size(6, sintValue);
        }
        if (((bitField0 & 0x00000040) == 0x00000040)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(7, boolValue);
        }
        size += extensionsSerializedSize();
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof vector_tile.VectorTile.Tile.Value)) {
          return super.equals(obj);
        }
        vector_tile.VectorTile.Tile.Value other = (vector_tile.VectorTile.Tile.Value) obj;

        boolean result;
        result =(hasStringValue() == other.hasStringValue());
        if (hasStringValue()) {
          result = result && getStringValue()
              .equals(other.getStringValue());
        }
        result = result && (hasFloatValue() == other.hasFloatValue());
        if (hasFloatValue()) {
          result = result && (
              java.lang.Float.floatToIntBits(getFloatValue())
              == java.lang.Float.floatToIntBits(
                  other.getFloatValue()));
        }
        result = result && (hasDoubleValue() == other.hasDoubleValue());
        if (hasDoubleValue()) {
          result = result && (
              java.lang.Double.doubleToLongBits(getDoubleValue())
              == java.lang.Double.doubleToLongBits(
                  other.getDoubleValue()));
        }
        result = result && (hasIntValue() == other.hasIntValue());
        if (hasIntValue()) {
          result = result && (getIntValue()
              == other.getIntValue());
        }
        result = result && (hasUintValue() == other.hasUintValue());
        if (hasUintValue()) {
          result = result && (getUintValue()
              == other.getUintValue());
        }
        result = result && (hasSintValue() == other.hasSintValue());
        if (hasSintValue()) {
          result = result && (getSintValue()
              == other.getSintValue());
        }
        result = result && (hasBoolValue() == other.hasBoolValue());
        if (hasBoolValue()) {
          result = result && (getBoolValue()
              == other.getBoolValue());
        }
        result = result && unknownFields.equals(other.unknownFields);
        result = result &&
            getExtensionFields().equals(other.getExtensionFields());
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasStringValue()) {
          hash = (37 * hash) + STRING_VALUE_FIELD_NUMBER;
          hash = (53 * hash) + getStringValue().hashCode();
        }
        if (hasFloatValue()) {
          hash = (37 * hash) + FLOAT_VALUE_FIELD_NUMBER;
          hash = (53 * hash) + java.lang.Float.floatToIntBits(
              getFloatValue());
        }
        if (hasDoubleValue()) {
          hash = (37 * hash) + DOUBLE_VALUE_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              java.lang.Double.doubleToLongBits(getDoubleValue()));
        }
        if (hasIntValue()) {
          hash = (37 * hash) + INT_VALUE_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getIntValue());
        }
        if (hasUintValue()) {
          hash = (37 * hash) + UINT_VALUE_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getUintValue());
        }
        if (hasSintValue()) {
          hash = (37 * hash) + SINT_VALUE_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getSintValue());
        }
        if (hasBoolValue()) {
          hash = (37 * hash) + BOOL_VALUE_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getBoolValue());
        }
        hash = hashFields(hash, getExtensionFields());
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }
      public static vector_tile.VectorTile.Tile.Value parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return vector_tile.VectorTile.Tile.Value
          .parseFrom(data);
  }
  
      public static vector_tile.VectorTile.Tile.Value parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return vector_tile.VectorTile.Tile.Value
          .parseFrom(data, extensionRegistry);
  }
  
      public static vector_tile.VectorTile.Tile.Value parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return vector_tile.VectorTile.Tile.Value
          .parseFrom(data);
  }
  
      public static vector_tile.VectorTile.Tile.Value parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return vector_tile.VectorTile.Tile.Value
          .parseFrom(data, extensionRegistry);
  }
  
      public static vector_tile.VectorTile.Tile.Value parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return vector_tile.VectorTile.Tile.Value
        .parseFrom(data);
}

      public static vector_tile.VectorTile.Tile.Value parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return vector_tile.VectorTile.Tile.Value
          .parseFrom(data, extensionRegistry);
  }
  
      public static vector_tile.VectorTile.Tile.Value parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return vector_tile.VectorTile.Tile.Value
        .parseFrom(input);
}

      public static vector_tile.VectorTile.Tile.Value parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return vector_tile.VectorTile.Tile.Value
          .parseFrom(input, extensionRegistry);
  }
  
      public static vector_tile.VectorTile.Tile.Value parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return vector_tile.VectorTile.Tile.Value
        .parseDelimitedFrom(input);
}

      public static vector_tile.VectorTile.Tile.Value parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return vector_tile.VectorTile.Tile.Value
          .parseDelimitedFrom(input, extensionRegistry);
  }
  
  public static vector_tile.VectorTile.Tile.Value parseFrom(
    com.google.protobuf.CodedInputStream input) throws java.io.IOException {
  return vector_tile.VectorTile.Tile.Value.parseFrom(input);
}

public static vector_tile.VectorTile.Tile.Value parseFrom(
  com.google.protobuf.CodedInputStream input,
  com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
return vector_tile.VectorTile.Tile.Value.parseFrom(input, extensionRegistry);
}


      @Override
      public Builder newBuilderForType() {
        return newBuilder();
      }

      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(vector_tile.VectorTile.Tile.Value prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      @Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
      }


      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        return new Builder(parent);
      }
      /**
       * <pre>
       * Variant type encoding
       * The use of values is described in section 4.1 of the specification
       * </pre>
       *
       * Protobuf type {@code vector_tile.Tile.Value}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<
            vector_tile.VectorTile.Tile.Value, Builder> implements
          // @@protoc_insertion_point(builder_implements:vector_tile.Tile.Value)
          vector_tile.VectorTile.Tile.ValueOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return vector_tile.VectorTile.internal_static_vector_tile_Tile_Value_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return vector_tile.VectorTile.internal_static_vector_tile_Tile_Value_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  vector_tile.VectorTile.Tile.Value.class, vector_tile.VectorTile.Tile.Value.Builder.class);
        }

        // Construct using vector_tile.VectorTile.Tile.Value.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
            /*
            Ciao
             */
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          stringValue = "";
          bitField0 = (bitField0 & ~0x00000001);
          floatvalue = 0F;
          bitField0 = (bitField0 & ~0x00000002);
          doubleValue = 0D;
          bitField0 = (bitField0 & ~0x00000004);
          intvalue = 0L;
          bitField0 = (bitField0 & ~0x00000008);
          uintValue = 0L;
          bitField0 = (bitField0 & ~0x00000010);
          sintValue = 0L;
          bitField0 = (bitField0 & ~0x00000020);
          boolValue = false;
          bitField0 = (bitField0 & ~0x00000040);
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return vector_tile.VectorTile.internal_static_vector_tile_Tile_Value_descriptor;
        }

        @java.lang.Override
        public vector_tile.VectorTile.Tile.Value getDefaultInstanceForType() {
          return vector_tile.VectorTile.Tile.Value.getDefaultInstance();
        }

        @java.lang.Override
        public vector_tile.VectorTile.Tile.Value build() {
          vector_tile.VectorTile.Tile.Value result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public vector_tile.VectorTile.Tile.Value buildPartial() {
          vector_tile.VectorTile.Tile.Value result = new vector_tile.VectorTile.Tile.Value(this);
          int bitField01 = bitField0;
          int toBitfield0 = 0;
          if (((bitField01 & 0x00000001) == 0x00000001)) {
            toBitfield0 |= 0x00000001;
          }
          result.stringvalue = stringValue;
          if (((bitField01 & 0x00000002) == 0x00000002)) {
            toBitfield0 |= 0x00000002;
          }
          result.floatValue = floatvalue;
          if (((bitField01 & 0x00000004) == 0x00000004)) {
            toBitfield0 |= 0x00000004;
          }
          result.doubleValue = doubleValue;
          if (((bitField01 & 0x00000008) == 0x00000008)) {
            toBitfield0 |= 0x00000008;
          }
          result.intValue = intvalue;
          if (((bitField01 & 0x00000010) == 0x00000010)) {
            toBitfield0 |= 0x00000010;
          }
          result.uintvalue = uintValue;
          if (((bitField01 & 0x00000020) == 0x00000020)) {
            toBitfield0 |= 0x00000020;
          }
          result.sintValue = sintValue;
          if (((bitField01 & 0x00000040) == 0x00000040)) {
            toBitfield0 |= 0x00000040;
          }
          result.boolValue = boolValue;
          result.bitField0 = toBitfield0;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return  super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return  super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public <T6> Builder setExtension(
            com.google.protobuf.GeneratedMessage.GeneratedExtension<
                vector_tile.VectorTile.Tile.Value, T6> extension,
            T6 value) {
          return super.setExtension(extension, value);
        }
        @java.lang.Override
        public <T2> Builder setExtension(
            com.google.protobuf.GeneratedMessage.GeneratedExtension<
                vector_tile.VectorTile.Tile.Value, java.util.List<T2>> extension,
            int index, T2 value) {
          return super.setExtension(extension, index, value);
        }
        @java.lang.Override
        public <T4> Builder addExtension(
            com.google.protobuf.GeneratedMessage.GeneratedExtension<
                vector_tile.VectorTile.Tile.Value, java.util.List<T4>> extension,
            T4 value) {
          return super.addExtension(extension, value);
        }
        @java.lang.Override
        public <T1> Builder clearExtension(
            com.google.protobuf.GeneratedMessage.GeneratedExtension<
                vector_tile.VectorTile.Tile.Value, ?> extension) {
          return super.clearExtension(extension);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof vector_tile.VectorTile.Tile.Value) {
            return mergeFrom((vector_tile.VectorTile.Tile.Value)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(vector_tile.VectorTile.Tile.Value other) {
          if (other == vector_tile.VectorTile.Tile.Value.getDefaultInstance()) return this;
          if (other.hasStringValue()) {
            bitField0 |= 0x00000001;
            stringValue = other.stringvalue;
            onChanged();
          }
          if (other.hasFloatValue()) {
            setFloatValue(other.getFloatValue());
          }
          if (other.hasDoubleValue()) {
            setDoubleValue(other.getDoubleValue());
          }
          if (other.hasIntValue()) {
            setIntValue(other.getIntValue());
          }
          if (other.hasUintValue()) {
            setUintValue(other.getUintValue());
          }
          if (other.hasSintValue()) {
            setSintValue(other.getSintValue());
          }
          if (other.hasBoolValue()) {
            setBoolValue(other.getBoolValue());
          }
          this.mergeExtensionFields(other);
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return extensionsAreInitialized();
        }

        @java.lang.Override
        public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
          vector_tile.VectorTile.Tile.Value parsedMessage = null;
          try {
            parsedMessage = vector_tile.VectorTile.Tile.Value.newBuilder().mergeFrom(input, extensionRegistry).build();
          } catch (InvalidProtocolBufferException e) {
            parsedMessage = (vector_tile.VectorTile.Tile.Value) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0;

        private java.lang.Object stringValue = "";
        /**
         * <pre>
         * Exactly one of these values must be present in a valid message
         * </pre>
         *
         * <code>optional string string_value = 1;</code>
         */
        public boolean hasStringValue() {
          return ((bitField0 & 0x00000001) == 0x00000001);
        }
        /**
         * <pre>
         * Exactly one of these values must be present in a valid message
         * </pre>
         *
         * <code>optional string string_value = 1;</code>
         */
        public java.lang.String getStringValue() {
          java.lang.Object ref = stringValue;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              stringValue = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * Exactly one of these values must be present in a valid message
         * </pre>
         *
         * <code>optional string string_value = 1;</code>
         */
        public com.google.protobuf.ByteString
            getStringValueBytes() {
          java.lang.Object ref = stringValue;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            stringValue = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * Exactly one of these values must be present in a valid message
         * </pre>
         *
         * <code>optional string string_value = 1;</code>
         */
        public Builder setStringValue(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0 |= 0x00000001;
          stringValue = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Exactly one of these values must be present in a valid message
         * </pre>
         *
         * <code>optional string string_value = 1;</code>
         */
        public Builder clearStringValue() {
          bitField0 = (bitField0 & ~0x00000001);
          stringValue = getDefaultInstance().getStringValue();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Exactly one of these values must be present in a valid message
         * </pre>
         *
         * <code>optional string string_value = 1;</code>
         */
        public Builder setStringValueBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0 |= 0x00000001;
          stringValue = value;
          onChanged();
          return this;
        }

        private float floatvalue;
        /**
         * <code>optional float float_value = 2;</code>
         */
        public boolean hasFloatValue() {
          return ((bitField0 & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional float float_value = 2;</code>
         */
        public float getFloatValue() {
          return floatvalue;
        }
        /**
         * <code>optional float float_value = 2;</code>
         */
        public Builder setFloatValue(float value) {
          bitField0 |= 0x00000002;
          floatvalue = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional float float_value = 2;</code>
         */
        public Builder clearFloatValue() {
          bitField0 = (bitField0 & ~0x00000002);
          floatvalue = 0F;
          onChanged();
          return this;
        }

        private double doubleValue;
        /**
         * <code>optional double double_value = 3;</code>
         */
        public boolean hasDoubleValue() {
          return ((bitField0 & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional double double_value = 3;</code>
         */
        public double getDoubleValue() {
          return doubleValue;
        }
        /**
         * <code>optional double double_value = 3;</code>
         */
        public Builder setDoubleValue(double value) {
          bitField0 |= 0x00000004;
          doubleValue = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional double double_value = 3;</code>
         */
        public Builder clearDoubleValue() {
          bitField0 = (bitField0 & ~0x00000004);
          doubleValue = 0D;
          onChanged();
          return this;
        }

        private long intvalue;
        /**
         * <code>optional int64 int_value = 4;</code>
         */
        public boolean hasIntValue() {
          return ((bitField0 & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional int64 int_value = 4;</code>
         */
        public long getIntValue() {
          return intvalue;
        }
        /**
         * <code>optional int64 int_value = 4;</code>
         */
        public Builder setIntValue(long value) {
          bitField0 |= 0x00000008;
          intvalue = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int64 int_value = 4;</code>
         */
        public Builder clearIntValue() {
          bitField0 = (bitField0 & ~0x00000008);
          intvalue = 0L;
          onChanged();
          return this;
        }

        private long uintValue;
        /**
         * <code>optional uint64 uint_value = 5;</code>
         */
        public boolean hasUintValue() {
          return ((bitField0 & 0x00000010) == 0x00000010);
        }
        /**
         * <code>optional uint64 uint_value = 5;</code>
         */
        public long getUintValue() {
          return uintValue;
        }
        /**
         * <code>optional uint64 uint_value = 5;</code>
         */
        public Builder setUintValue(long value) {
          bitField0 |= 0x00000010;
          uintValue = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint64 uint_value = 5;</code>
         */
        public Builder clearUintValue() {
          bitField0 = (bitField0 & ~0x00000010);
          uintValue = 0L;
          onChanged();
          return this;
        }

        private long sintValue;
        /**
         * <code>optional sint64 sint_value = 6;</code>
         */
        public boolean hasSintValue() {
          return ((bitField0 & 0x00000020) == 0x00000020);
        }
        /**
         * <code>optional sint64 sint_value = 6;</code>
         */
        public long getSintValue() {
          return sintValue;
        }
        /**
         * <code>optional sint64 sint_value = 6;</code>
         */
        public Builder setSintValue(long value) {
          bitField0 |= 0x00000020;
          sintValue = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional sint64 sint_value = 6;</code>
         */
        public Builder clearSintValue() {
          bitField0 = (bitField0 & ~0x00000020);
          sintValue = 0L;
          onChanged();
          return this;
        }

        private boolean boolValue;
        /**
         * <code>optional bool bool_value = 7;</code>
         */
        public boolean hasBoolValue() {
          return ((bitField0 & 0x00000040) == 0x00000040);
        }
        /**
         * <code>optional bool bool_value = 7;</code>
         */
        public boolean getBoolValue() {
          return boolValue;
        }
        /**
         * <code>optional bool bool_value = 7;</code>
         */
        public Builder setBoolValue(boolean value) {
          bitField0 |= 0x00000040;
          boolValue = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional bool bool_value = 7;</code>
         */
        public Builder clearBoolValue() {
          bitField0 = (bitField0 & ~0x00000040);
          boolValue = false;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:vector_tile.Tile.Value)
      }

      // @@protoc_insertion_point(class_scope:vector_tile.Tile.Value)
      private static final vector_tile.VectorTile.Tile.Value DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new vector_tile.VectorTile.Tile.Value();
      }

      public static vector_tile.VectorTile.Tile.Value getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<Value>
          PARSER = new com.google.protobuf.AbstractParser<Value>() {
        @java.lang.Override
        public Value parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Value(input, extensionRegistry);
        }
      };

      /**
 * Returns the parser for this message type.
 */
      public static Parser<Value> getMessageParser() {
        MessageLite defaultInstance = Value.getDefaultInstance();
        if (defaultInstance instanceof Parser<?>) {
          return (Parser<Value>) defaultInstance;
        }
        throw new IllegalStateException("Unablee to get parser for type Value");
      }


      @java.lang.Override
      public Parser<Value> getParserForType() {
        MessageLite defaultInstance = Value.getDefaultInstance();
        if (defaultInstance instanceof Parser<?>) {
          return (Parser<Value>) defaultInstance;
        }
        throw new IllegalStateException("Unable to get parser for type Value");
      }

      @java.lang.Override
      public vector_tile.VectorTile.Tile.Value getDefaultInstanceForType() {
        Logger logger = Logger.getLogger(CHPreparationGraph.class.getName());
        logger.info("main theme has been overload");
        return DEFAULT_INSTANCE;
      }

    }

    public interface FeatureOrBuilder extends
        // @@protoc_insertion_point(interface_extends:vector_tile.Tile.Feature)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional uint64 id = 1 [default = 0];</code>
       */
      boolean hasId();
      /**
       * <code>optional uint64 id = 1 [default = 0];</code>
       */
      long getId();

      /**
       * <pre>
       * Tags of this feature are encoded as repeated pairs of
       * integers.
       * A detailed description of tags is located in sections
       * 4.2 and 4.4 of the specification
       * </pre>
       *
       * <code>repeated uint32 tags = 2 [packed = true];</code>
       */
      java.util.List<java.lang.Integer> getTagsList();
      /**
       * <pre>
       * Tags of this feature are encoded as repeated pairs of
       * integers.
       * A detailed description of tags is located in sections
       * 4.2 and 4.4 of the specification
       * </pre>
       *
       * <code>repeated uint32 tags = 2 [packed = true];</code>
       */
      int getTagsCount();
      /**
       * <pre>
       * Tags of this feature are encoded as repeated pairs of
       * integers.
       * A detailed description of tags is located in sections
       * 4.2 and 4.4 of the specification
       * </pre>
       *
       * <code>repeated uint32 tags = 2 [packed = true];</code>
       */
      int getTags(int index);

      /**
       * <pre>
       * The type of geometry stored in this feature.
       * </pre>
       *
       * <code>optional .vector_tile.Tile.GeomType type = 3 [default = UNKNOWN];</code>
       */
      boolean hasType();
      /**
       * <pre>
       * The type of geometry stored in this feature.
       * </pre>
       *
       * <code>optional .vector_tile.Tile.GeomType type = 3 [default = UNKNOWN];</code>
       */
      vector_tile.VectorTile.Tile.GeomType getType();

      /**
       * <pre>
       * Contains a stream of commands and parameters (vertices).
       * A detailed description on geometry encoding is located in 
       * section 4.3 of the specification.
       * </pre>
       *
       * <code>repeated uint32 geometry = 4 [packed = true];</code>
       */
      java.util.List<java.lang.Integer> getGeometryList();
      /**
       * <pre>
       * Contains a stream of commands and parameters (vertices).
       * A detailed description on geometry encoding is located in 
       * section 4.3 of the specification.
       * </pre>
       *
       * <code>repeated uint32 geometry = 4 [packed = true];</code>
       */
      int getGeometryCount();
      /**
       * <pre>
       * Contains a stream of commands and parameters (vertices).
       * A detailed description on geometry encoding is located in 
       * section 4.3 of the specification.
       * </pre>
       *
       * <code>repeated uint32 geometry = 4 [packed = true];</code>
       */
      int getGeometry(int index);
    }
    /**
     * <pre>
     * Features are described in section 4.2 of the specification
     * </pre>
     *
     * Protobuf type {@code vector_tile.Tile.Feature}
     */
    public  static final class Feature extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:vector_tile.Tile.Feature)
        FeatureOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Feature.newBuilder() to construct.
      private Feature(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Feature() {
        id = 0L;
        tags = java.util.Collections.emptyList();
        type = 0;
        geometry = java.util.Collections.emptyList();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Feature(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutableBitField0 = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                bitField0 |= 0x00000001;
                id = input.readUInt64();
                break;
              }
              case 16: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (((mutableBitField0 & 0x00000002) != 0x00000002) && input.getBytesUntilLimit() > 0) {
                  tags = new java.util.ArrayList<>();
                  mutableBitField0 |= 0x00000002;
                }
                mannagNo(input);
                input.popLimit(limit);
                break;
              }


              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (((mutableBitField0 & 0x00000002) != 0x00000002) && input.getBytesUntilLimit() > 0) {
                  tags = new java.util.ArrayList<>();
                  mutableBitField0 |= 0x00000002;
                }
                iniziamoBene4(input);
                input.popLimit(limit);
                break;
              }
              case 24: {
                int rawValue = input.readEnum();
                  @SuppressWarnings("deprecation")
                vector_tile.VectorTile.Tile.GeomType value = vector_tile.VectorTile.Tile.GeomType.valueOf(rawValue);
                iniziamoBene(unknownFields, rawValue, value);
                break;
              }
              case 32: {
                if ((mutableBitField0 & 0x00000008) == 0x00000008) {
                  geometry.add(input.readUInt32());
                  break;
                }
                geometry = new java.util.ArrayList<>();
                mutableBitField0 |= 0x00000008;
                geometry.add(input.readUInt32());
                break;
              }

              case 34: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                  if ((mutableBitField0 & 0x00000008) == 0x00000008) {
                    iniziamoBene5(input, geometry);
                    input.popLimit(limit);
                    break;
                  }
                  geometry = new java.util.ArrayList<>();
                  mutableBitField0 |= 0x00000008;
                  iniziamoBene5(input, geometry);
                  input.popLimit(limit);
                  break;
                }

                default: {
                done = isDoneorNot(input, extensionRegistry, unknownFields, done, tag);
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          iniziamoBene2(mutableBitField0);
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }

      private void mannagNo(CodedInputStream input) throws IOException {
        while (input.getBytesUntilLimit() > 0) {
          tags.add(input.readUInt32());
        }
      }

      private boolean isDoneorNot(CodedInputStream input, ExtensionRegistryLite extensionRegistry, UnknownFieldSet.Builder unknownFields, boolean done, int tag) throws IOException {
        if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
          done = true;
        }
        return done;
      }

      private void iniziamoBene5(CodedInputStream input, List<Integer> pollo) throws IOException {
        while (input.getBytesUntilLimit() > 0) {
          pollo.add(input.readUInt32());
        }
      }

      private void iniziamoBene4(CodedInputStream input) throws IOException {
        iniziamoBene5(input, tags);
      }

      private void iniziamoBene2(int pollo) {
        if (((pollo & 0x00000002) == 0x00000002)) {
          tags = java.util.Collections.unmodifiableList(tags);
        }
        if (((pollo & 0x00000008) == 0x00000008)) {
          geometry = java.util.Collections.unmodifiableList(geometry);
        }
      }

      private void iniziamoBene(UnknownFieldSet.Builder unknownFields, int rawValue, GeomType value) {
        if (value == null) {
          unknownFields.mergeVarintField(3, rawValue);
        } else {
          bitField0 |= 0x00000002;
          type = rawValue;
        }
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vector_tile.VectorTile.internal_static_vector_tile_Tile_Feature_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vector_tile.VectorTile.internal_static_vector_tile_Tile_Feature_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                vector_tile.VectorTile.Tile.Feature.class, vector_tile.VectorTile.Tile.Feature.Builder.class);
      }

      private int bitField0;
      public static final int ID_FIELD_NUMBER = 1;
      private long id;
      /**
       * <code>optional uint64 id = 1 [default = 0];</code>
       */
      public boolean hasId() {
        return ((bitField0 & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint64 id = 1 [default = 0];</code>
       */
      public long getId() {
        return id;
      }

      public static final int TAGS_FIELD_NUMBER = 2;
      private java.util.List<java.lang.Integer> tags;
      /**
       * <pre>
       * Tags of this feature are encoded as repeated pairs of
       * integers.
       * A detailed description of tags is located in sections
       * 4.2 and 4.4 of the specification
       * </pre>
       *
       * <code>repeated uint32 tags = 2 [packed = true];</code>
       */
      public java.util.List<java.lang.Integer>
          getTagsList() {
        return tags;
      }
      /**
       * <pre>
       * Tags of this feature are encoded as repeated pairs of
       * integers.
       * A detailed description of tags is located in sections
       * 4.2 and 4.4 of the specification
       * </pre>
       *
       * <code>repeated uint32 tags = 2 [packed = true];</code>
       */
      public int getTagsCount() {
        return tags.size();
      }
      /**
       * <pre>
       * Tags of this feature are encoded as repeated pairs of
       * integers.
       * A detailed description of tags is located in sections
       * 4.2 and 4.4 of the specification
       * </pre>
       *
       * <code>repeated uint32 tags = 2 [packed = true];</code>
       */
      public int getTags(int index) {
        return tags.get(index);
      }
      private int tagsMemoizedSerializedSize = -1;

      public static final int TYPE_FIELD_NUMBER = 3;
      private int type;
      /**
       * <pre>
       * The type of geometry stored in this feature.
       * </pre>
       *
       * <code>optional .vector_tile.Tile.GeomType type = 3 [default = UNKNOWN];</code>
       */
      public boolean hasType() {
        return ((bitField0 & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * The type of geometry stored in this feature.
       * </pre>
       *
       * <code>optional .vector_tile.Tile.GeomType type = 3 [default = UNKNOWN];</code>
       */
      public vector_tile.VectorTile.Tile.GeomType getType() {
        @SuppressWarnings("deprecation")
        vector_tile.VectorTile.Tile.GeomType result = vector_tile.VectorTile.Tile.GeomType.valueOf(type);
        return result == null ? vector_tile.VectorTile.Tile.GeomType.UNKNOWN : result;
      }

      public static final int GEOMETRY_FIELD_NUMBER = 4;
      private java.util.List<java.lang.Integer> geometry;
      /**
       * <pre>
       * Contains a stream of commands and parameters (vertices).
       * A detailed description on geometry encoding is located in 
       * section 4.3 of the specification.
       * </pre>
       *
       * <code>repeated uint32 geometry = 4 [packed = true];</code>
       */
      public java.util.List<java.lang.Integer>
          getGeometryList() {
        return geometry;
      }
      /**
       * <pre>
       * Contains a stream of commands and parameters (vertices).
       * A detailed description on geometry encoding is located in 
       * section 4.3 of the specification.
       * </pre>
       *
       * <code>repeated uint32 geometry = 4 [packed = true];</code>
       */
      public int getGeometryCount() {
        return geometry.size();
      }
      /**
       * <pre>
       * Contains a stream of commands and parameters (vertices).
       * A detailed description on geometry encoding is located in 
       * section 4.3 of the specification.
       * </pre>
       *
       * <code>repeated uint32 geometry = 4 [packed = true];</code>
       */
      public int getGeometry(int index) {
        return geometry.get(index);
      }
      private int geometryMemoizedSerializedSize = -1;

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0 & 0x00000001) == 0x00000001)) {
          output.writeUInt64(1, id);
        }
        if (!getTagsList().isEmpty()) {
          output.writeUInt32NoTag(18);
          output.writeUInt32NoTag(tagsMemoizedSerializedSize);
        }
        for (int i = 0; i < tags.size(); i++) {
          output.writeUInt32NoTag(tags.get(i));
        }
        if (((bitField0 & 0x00000002) == 0x00000002)) {
          output.writeEnum(3, type);
        }
        if (!getGeometryList().isEmpty()) {
          output.writeUInt32NoTag(34);
          output.writeUInt32NoTag(geometryMemoizedSerializedSize);
        }
        for (int i = 0; i < geometry.size(); i++) {
          output.writeUInt32NoTag(geometry.get(i));
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0 & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(1, id);
        }
        size = method2(size);
        if (((bitField0 & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(3, type);
        }
        size = method3(size);
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private int method3(int size) {
        int dataSize = 0;
        for (int i = 0; i < geometry.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(geometry.get(i));
        }
        size += dataSize;
        if (!getGeometryList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        geometryMemoizedSerializedSize = dataSize;
        return size;
      }

      private int method2(int size) {
        int dataSize = 0;
        for (int i = 0; i < tags.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(tags.get(i));
        }
        size += dataSize;
        if (!getTagsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        tagsMemoizedSerializedSize = dataSize;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof vector_tile.VectorTile.Tile.Feature)) {
          return super.equals(obj);
        }
        vector_tile.VectorTile.Tile.Feature other = (vector_tile.VectorTile.Tile.Feature) obj;

        boolean result = true;
        result = hasId() == other.hasId();
        if (hasId()) {
          result = result && (getId()
              == other.getId());
        }
        result = result && getTagsList()
            .equals(other.getTagsList());
        result = result && (hasType() == other.hasType());
        if (hasType()) {
          result = result && type == other.type;
        }
        result = result && getGeometryList()
            .equals(other.getGeometryList());
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasId()) {
          hash = (37 * hash) + ID_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getId());
        }
        if (getTagsCount() > 0) {
          hash = (37 * hash) + TAGS_FIELD_NUMBER;
          hash = (53 * hash) + getTagsList().hashCode();
        }
        if (hasType()) {
          hash = (37 * hash) + TYPE_FIELD_NUMBER;
          hash = (53 * hash) + type;
        }
        if (getGeometryCount() > 0) {
          hash = (37 * hash) + GEOMETRY_FIELD_NUMBER;
          hash = (53 * hash) + getGeometryList().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static Feature parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
        return Feature.parseFrom(data);
      }
      public static Feature parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return Feature.newBuilder().mergeFrom(data.array(), extensionRegistry).build();
      }
      public static Feature parseFrom(ByteString data) throws InvalidProtocolBufferException {
        return Feature.parseFrom(data);
      }
      public static Feature parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return Feature.newBuilder().mergeFrom(data, extensionRegistry).build();
      }
      public static Feature parseFrom(byte[] data) throws InvalidProtocolBufferException {
        return Feature.parseFrom(data);
      }
      public static Feature parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return Feature.newBuilder().mergeFrom(data, extensionRegistry).build();
      }
      public static Feature parseFrom(InputStream input) {
        return Feature.parseFrom(input);
      }
      public static Feature parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
        CodedInputStream codedInput = CodedInputStream.newInstance(input);
        return Feature.parseFrom(codedInput, extensionRegistry);
      }
      public static Feature parseDelimitedFrom(InputStream input) throws IOException {
        CodedInputStream codedInput = CodedInputStream.newInstance(input);
        int size = codedInput.readRawVarint32();
        int limit = codedInput.pushLimit(size);
        DynamicMessage dynamicMessage = DynamicMessage.parseFrom(Feature.getDescriptor(), codedInput);
        codedInput.checkLastTagWas(0);
        codedInput.popLimit(limit);
        return Feature.parseFrom(dynamicMessage.toByteArray());
      }
      public static Feature parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry)
              throws IOException {
        CodedInputStream codedInput = CodedInputStream.newInstance(input);
        int size = codedInput.readRawVarint32();
        int limit = codedInput.pushLimit(size);
        Feature feature = Feature.parseFrom(codedInput, extensionRegistry);
        codedInput.checkLastTagWas(0);
        codedInput.popLimit(limit);
        return feature;
      }
      public static Feature parseFrom(CodedInputStream input) throws IOException {
        return Feature.parseFrom(input);
      }
      public static Feature parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
        return Feature.parseFrom(input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(vector_tile.VectorTile.Tile.Feature prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        return new Builder(parent);
      }
      /**
       * <pre>
       * Features are described in section 4.2 of the specification
       * </pre>
       *
       * Protobuf type {@code vector_tile.Tile.Feature}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:vector_tile.Tile.Feature)
          vector_tile.VectorTile.Tile.FeatureOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return vector_tile.VectorTile.internal_static_vector_tile_Tile_Feature_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return vector_tile.VectorTile.internal_static_vector_tile_Tile_Feature_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  vector_tile.VectorTile.Tile.Feature.class, vector_tile.VectorTile.Tile.Feature.Builder.class);
        }

        // Construct using vector_tile.VectorTile.Tile.Feature.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
            //nothing
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          ida = 0L;
          bitField0 = (bitField0 & ~0x00000001);
          tags = java.util.Collections.emptyList();
          bitField0 = (bitField0 & ~0x00000002);
          type = 0;
          bitField0 = (bitField0 & ~0x00000004);
          geometryAsh = java.util.Collections.emptyList();
          bitField0 = (bitField0 & ~0x00000008);
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return vector_tile.VectorTile.internal_static_vector_tile_Tile_Feature_descriptor;
        }

        @java.lang.Override
        public vector_tile.VectorTile.Tile.Feature getDefaultInstanceForType() {
          return vector_tile.VectorTile.Tile.Feature.getDefaultInstance();
        }

        @java.lang.Override
        public vector_tile.VectorTile.Tile.Feature build() {
          vector_tile.VectorTile.Tile.Feature result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public vector_tile.VectorTile.Tile.Feature buildPartial() {
          vector_tile.VectorTile.Tile.Feature result = new vector_tile.VectorTile.Tile.Feature(this);
          int fromBitField0 = bitField0;
          int toBitfield0 = 0;
          if (((fromBitField0 & 0x00000001) == 0x00000001)) {
            toBitfield0 |= 0x00000001;
          }
          result.id = ida;
          if (((bitField0 & 0x00000002) == 0x00000002)) {
            tags = java.util.Collections.unmodifiableList(tags);
            bitField0 = (bitField0 & ~0x00000002);
          }
          result.tags = tags;
          if (((fromBitField0 & 0x00000004) == 0x00000004)) {
            toBitfield0 |= 0x00000002;
          }
          result.type = type;
          if (((bitField0 & 0x00000008) == 0x00000008)) {
            geometryAsh = java.util.Collections.unmodifiableList(geometryAsh);
            bitField0 = (bitField0 & ~0x00000008);
          }
          result.geometry = geometryAsh;
          result.bitField0 = toBitfield0;
          onBuilt();
          return result;
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return  super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return  super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return  super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return  super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return  super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof vector_tile.VectorTile.Tile.Feature) {
            return mergeFrom((vector_tile.VectorTile.Tile.Feature)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(vector_tile.VectorTile.Tile.Feature other) {
          if (other == vector_tile.VectorTile.Tile.Feature.getDefaultInstance()) return this;
          if (other.hasId()) {
            setId(other.getId());
          }
          if (!other.tags.isEmpty()) {
            if (tags.isEmpty()) {
              tags = other.tags;
              bitField0 = (bitField0 & ~0x00000002);
            } else {
              ensureTagsIsMutable();
              tags.addAll(other.tags);
            }
            onChanged();
          }
          if (other.hasType()) {
            setType(other.getType());
          }
          if (!other.geometry.isEmpty()) {
            if (geometryAsh.isEmpty()) {
              geometryAsh = other.geometry;
              bitField0 = (bitField0 & ~0x00000008);
            } else {
              ensureGeometryIsMutable();
              geometryAsh.addAll(other.geometry);
            }
            onChanged();
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
                throws IOException {
          Feature.Builder featureBuilder = Feature.newBuilder();
          int limit = input.pushLimit(input.readRawVarint32());
          featureBuilder.mergeFrom(input, extensionRegistry);
          input.checkLastTagWas(0);
          input.popLimit(limit);
          mergeFrom(featureBuilder.build());
          return this;
        }
        private int bitField0;

        private long ida;
        /**
         * <code>optional uint64 id = 1 [default = 0];</code>
         */
        public boolean hasId() {
          return ((bitField0 & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint64 id = 1 [default = 0];</code>
         */
        public long getId() {
          return ida;
        }
        /**
         * <code>optional uint64 id = 1 [default = 0];</code>
         */
        public Builder setId(long value) {
          bitField0 |= 0x00000001;
          ida = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint64 id = 1 [default = 0];</code>
         */
        public Builder clearId() {
          bitField0 = (bitField0 & ~0x00000001);
          ida = 0L;
          onChanged();
          return this;
        }

        private java.util.List<java.lang.Integer> tags = java.util.Collections.emptyList();
        private void ensureTagsIsMutable() {
          if (((bitField0 & 0x00000002) != 0x00000002)) {
            tags = new java.util.ArrayList<>(tags);
            bitField0 |= 0x00000002;
           }
        }
        /**
         * <pre>
         * Tags of this feature are encoded as repeated pairs of
         * integers.
         * A detailed description of tags is located in sections
         * 4.2 and 4.4 of the specification
         * </pre>
         *
         * <code>repeated uint32 tags = 2 [packed = true];</code>
         */
        public java.util.List<java.lang.Integer>
            getTagsList() {
          return java.util.Collections.unmodifiableList(tags);
        }
        /**
         * <pre>
         * Tags of this feature are encoded as repeated pairs of
         * integers.
         * A detailed description of tags is located in sections
         * 4.2 and 4.4 of the specification
         * </pre>
         *
         * <code>repeated uint32 tags = 2 [packed = true];</code>
         */
        public int getTagsCount() {
          return tags.size();
        }
        /**
         * <pre>
         * Tags of this feature are encoded as repeated pairs of
         * integers.
         * A detailed description of tags is located in sections
         * 4.2 and 4.4 of the specification
         * </pre>
         *
         * <code>repeated uint32 tags = 2 [packed = true];</code>
         */
        public int getTags(int index) {
          return tags.get(index);
        }
        /**
         * <pre>
         * Tags of this feature are encoded as repeated pairs of
         * integers.
         * A detailed description of tags is located in sections
         * 4.2 and 4.4 of the specification
         * </pre>
         *
         * <code>repeated uint32 tags = 2 [packed = true];</code>
         */
        public Builder setTags(
            int index, int value) {
          ensureTagsIsMutable();
          tags.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Tags of this feature are encoded as repeated pairs of
         * integers.
         * A detailed description of tags is located in sections
         * 4.2 and 4.4 of the specification
         * </pre>
         *
         * <code>repeated uint32 tags = 2 [packed = true];</code>
         */
        public Builder addTags(int value) {
          ensureTagsIsMutable();
          tags.add(value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Tags of this feature are encoded as repeated pairs of
         * integers.
         * A detailed description of tags is located in sections
         * 4.2 and 4.4 of the specification
         * </pre>
         *
         * <code>repeated uint32 tags = 2 [packed = true];</code>
         */
        public Builder addAllTags(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureTagsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, tags);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Tags of this feature are encoded as repeated pairs of
         * integers.
         * A detailed description of tags is located in sections
         * 4.2 and 4.4 of the specification
         * </pre>
         *
         * <code>repeated uint32 tags = 2 [packed = true];</code>
         */
        public Builder clearTags() {
          tags = java.util.Collections.emptyList();
          bitField0 = (bitField0 & ~0x00000002);
          onChanged();
          return this;
        }

        private int type = 0;
        /**
         * <pre>
         * The type of geometry stored in this feature.
         * </pre>
         *
         * <code>optional .vector_tile.Tile.GeomType type = 3 [default = UNKNOWN];</code>
         */
        public boolean hasType() {
          return ((bitField0 & 0x00000004) == 0x00000004);
        }
        /**
         * <pre>
         * The type of geometry stored in this feature.
         * </pre>
         *
         * <code>optional .vector_tile.Tile.GeomType type = 3 [default = UNKNOWN];</code>
         */
        public vector_tile.VectorTile.Tile.GeomType getType() {
          @SuppressWarnings("deprecation")
          vector_tile.VectorTile.Tile.GeomType result = vector_tile.VectorTile.Tile.GeomType.valueOf(type);
          return result == null ? vector_tile.VectorTile.Tile.GeomType.UNKNOWN : result;
        }
        /**
         * <pre>
         * The type of geometry stored in this feature.
         * </pre>
         *
         * <code>optional .vector_tile.Tile.GeomType type = 3 [default = UNKNOWN];</code>
         */
        public Builder setType(vector_tile.VectorTile.Tile.GeomType value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0 |= 0x00000004;
          type = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The type of geometry stored in this feature.
         * </pre>
         *
         * <code>optional .vector_tile.Tile.GeomType type = 3 [default = UNKNOWN];</code>
         */
        public Builder clearType() {
          bitField0 = (bitField0 & ~0x00000004);
          type = 0;
          onChanged();
          return this;
        }

        private java.util.List<java.lang.Integer> geometryAsh = java.util.Collections.emptyList();
        private void ensureGeometryIsMutable() {
          if (((bitField0 & 0x00000008) != 0x00000008)) {
            geometryAsh = new java.util.ArrayList<>(geometryAsh);
            bitField0 |= 0x00000008;
           }
        }
        /**
         * <pre>
         * Contains a stream of commands and parameters (vertices).
         * A detailed description on geometry encoding is located in 
         * section 4.3 of the specification.
         * </pre>
         *
         * <code>repeated uint32 geometry = 4 [packed = true];</code>
         */
        public java.util.List<java.lang.Integer>
            getGeometryList() {
          return java.util.Collections.unmodifiableList(geometryAsh);
        }
        /**
         * <pre>
         * Contains a stream of commands and parameters (vertices).
         * A detailed description on geometry encoding is located in 
         * section 4.3 of the specification.
         * </pre>
         *
         * <code>repeated uint32 geometry = 4 [packed = true];</code>
         */
        public int getGeometryCount() {
          return geometryAsh.size();
        }
        /**
         * <pre>
         * Contains a stream of commands and parameters (vertices).
         * A detailed description on geometry encoding is located in 
         * section 4.3 of the specification.
         * </pre>
         *
         * <code>repeated uint32 geometry = 4 [packed = true];</code>
         */
        public int getGeometry(int index) {
          return geometryAsh.get(index);
        }
        /**
         * <pre>
         * Contains a stream of commands and parameters (vertices).
         * A detailed description on geometry encoding is located in 
         * section 4.3 of the specification.
         * </pre>
         *
         * <code>repeated uint32 geometry = 4 [packed = true];</code>
         */
        public Builder setGeometry(
            int index, int value) {
          ensureGeometryIsMutable();
          geometryAsh.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Contains a stream of commands and parameters (vertices).
         * A detailed description on geometry encoding is located in 
         * section 4.3 of the specification.
         * </pre>
         *
         * <code>repeated uint32 geometry = 4 [packed = true];</code>
         */
        public Builder addGeometry(int value) {
          ensureGeometryIsMutable();
          geometryAsh.add(value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Contains a stream of commands and parameters (vertices).
         * A detailed description on geometry encoding is located in 
         * section 4.3 of the specification.
         * </pre>
         *
         * <code>repeated uint32 geometry = 4 [packed = true];</code>
         */
        public Builder addAllGeometry(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureGeometryIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, geometryAsh);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Contains a stream of commands and parameters (vertices).
         * A detailed description on geometry encoding is located in 
         * section 4.3 of the specification.
         * </pre>
         *
         * <code>repeated uint32 geometry = 4 [packed = true];</code>
         */
        public Builder clearGeometry() {
          geometryAsh = java.util.Collections.emptyList();
          bitField0 = (bitField0 & ~0x00000008);
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:vector_tile.Tile.Feature)
      }

      // @@protoc_insertion_point(class_scope:vector_tile.Tile.Feature)
      private static final vector_tile.VectorTile.Tile.Feature DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new vector_tile.VectorTile.Tile.Feature();
      }

      public static vector_tile.VectorTile.Tile.Feature getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<Feature>
          PARSER = new com.google.protobuf.AbstractParser<Feature>() {
        @java.lang.Override
        public Feature parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Feature(input, extensionRegistry);
        }
      };

      public Feature parseFeature(byte[] data) throws InvalidProtocolBufferException {
        return Feature.parseFrom(data);
      }

      @java.lang.Override
      public vector_tile.VectorTile.Tile getDefaultInstanceForType() {
        return vector_tile.VectorTile.Tile.getDefaultInstance();
      }


    }

    public interface LayerOrBuilder extends
        // @@protoc_insertion_point(interface_extends:vector_tile.Tile.Layer)
        com.google.protobuf.GeneratedMessageV3.
            ExtendableMessageOrBuilder<Layer> {

      /**
       * <pre>
       * Any compliant implementation must first read the version
       * number encoded in this message and choose the correct
       * implementation for this version number before proceeding to
       * decode other parts of this message.
       * </pre>
       *
       * <code>required uint32 version = 15 [default = 1];</code>
       */
      boolean hasVersion();
      /**
       * <pre>
       * Any compliant implementation must first read the version
       * number encoded in this message and choose the correct
       * implementation for this version number before proceeding to
       * decode other parts of this message.
       * </pre>
       *
       * <code>required uint32 version = 15 [default = 1];</code>
       */
      int getVersion();

      /**
       * <code>required string name = 1;</code>
       */
      boolean hasName();
      /**
       * <code>required string name = 1;</code>
       */
      java.lang.String getName();
      /**
       * <code>required string name = 1;</code>
       */
      com.google.protobuf.ByteString
          getNameBytes();

      /**
       * <pre>
       * The actual features in this tile.
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
       */
      java.util.List<vector_tile.VectorTile.Tile.Feature> 
          getFeaturesList();
      /**
       * <pre>
       * The actual features in this tile.
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
       */
      vector_tile.VectorTile.Tile.Feature getFeatures(int index);
      /**
       * <pre>
       * The actual features in this tile.
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
       */
      int getFeaturesCount();
      /**
       * <pre>
       * The actual features in this tile.
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
       */
      <T extends vector_tile.VectorTile.Tile.FeatureOrBuilder> java.util.List<T> getFeaturesOrBuilderList();

      /**
       * <pre>
       * The actual features in this tile.
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
       */
      vector_tile.VectorTile.Tile.FeatureOrBuilder getFeaturesOrBuilder(
          int index);

      /**
       * <pre>
       * Dictionary encoding for keys
       * </pre>
       *
       * <code>repeated string keys = 3;</code>
       */
      java.util.List<java.lang.String>
          getKeysList();
      /**
       * <pre>
       * Dictionary encoding for keys
       * </pre>
       *
       * <code>repeated string keys = 3;</code>
       */
      int getKeysCount();
      /**
       * <pre>
       * Dictionary encoding for keys
       * </pre>
       *
       * <code>repeated string keys = 3;</code>
       */
      java.lang.String getKeys(int index);
      /**
       * <pre>
       * Dictionary encoding for keys
       * </pre>
       *
       * <code>repeated string keys = 3;</code>
       */
      com.google.protobuf.ByteString
          getKeysBytes(int index);

      /**
       * <pre>
       * Dictionary encoding for values
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Value values = 4;</code>
       */
      java.util.List<vector_tile.VectorTile.Tile.Value> 
          getValuesList();
      /**
       * <pre>
       * Dictionary encoding for values
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Value values = 4;</code>
       */
      vector_tile.VectorTile.Tile.Value getValues(int index);
      /**
       * <pre>
       * Dictionary encoding for values
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Value values = 4;</code>
       */
      int getValuesCount();
      /**
       * <pre>
       * Dictionary encoding for values
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Value values = 4;</code>
       */
      <T extends vector_tile.VectorTile.Tile.ValueOrBuilder> java.util.List<T> getValuesOrBuilderList();

      /**
       * <pre>
       * Dictionary encoding for values
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Value values = 4;</code>
       */
      vector_tile.VectorTile.Tile.ValueOrBuilder getValuesOrBuilder(
          int index);

      /**
       * <pre>
       * Although this is an "optional" field it is required by the specification.
       * See https://github.com/mapbox/vector-tile-spec/issues/47
       * </pre>
       *
       * <code>optional uint32 extent = 5 [default = 4096];</code>
       */
      boolean hasExtent();
      /**
       * <pre>
       * Although this is an "optional" field it is required by the specification.
       * See https://github.com/mapbox/vector-tile-spec/issues/47
       * </pre>
       *
       * <code>optional uint32 extent = 5 [default = 4096];</code>
       */
      int getExtent();
    }
    /**
     * <pre>
     * Layers are described in section 4.1 of the specification
     * </pre>
     *
     * Protobuf type {@code vector_tile.Tile.Layer}
     */
    public  static final class Layer extends
        com.google.protobuf.GeneratedMessageV3.ExtendableMessage<
          Layer> implements
        // @@protoc_insertion_point(message_implements:vector_tile.Tile.Layer)
        LayerOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Layer.newBuilder() to construct.
      private Layer(com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<vector_tile.VectorTile.Tile.Layer, ?> builder) {
        super(builder);
      }
      private Layer() {
        version = 1;
        newName = "";
        features = java.util.Collections.emptyList();
        keys = com.google.protobuf.LazyStringArrayList.EMPTY;
        values = java.util.Collections.emptyList();
        extent = 4096;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Layer(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutableBitfield0 = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0 |= 0x00000002;
                newName = bs;
                break;
              }
              case 18: {
                if (((mutableBitfield0 & 0x00000004) != 0x00000004)) {
                  features = new java.util.ArrayList<>();
                  mutableBitfield0 |= 0x00000004;
                }
                features.add(
                    input.readMessage(vector_tile.VectorTile.Tile.Feature.PARSER, extensionRegistry));
                break;
              }
              case 26: {
                com.google.protobuf.ByteString bs = input.readBytes();
                if (((mutableBitfield0 & 0x00000008) != 0x00000008)) {
                  keys = new com.google.protobuf.LazyStringArrayList();
                  mutableBitfield0 |= 0x00000008;
                }
                keys.add(bs);
                break;
              }
              case 34: {
                if (((mutableBitfield0 & 0x00000010) != 0x00000010)) {
                  values = new java.util.ArrayList<>();
                  mutableBitfield0 |= 0x00000010;
                }
                values.add(
                    input.readMessage(vector_tile.VectorTile.Tile.Value.PARSER, extensionRegistry));
                break;
              }
              case 40: {
                bitField0 |= 0x00000004;
                extent = input.readUInt32();
                break;
              }
              case 120: {
                bitField0 |= 0x00000001;
                version = input.readUInt32();
                break;
              }
              default: {
                done = siFatto(input, extensionRegistry, unknownFields, done, tag);
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          bellaRagazzi(mutableBitfield0);
          bellaRagazzi2(mutableBitfield0);
          pDio(mutableBitfield0);
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }

      private void pDio(int newMutableBitField0) {
        if (((newMutableBitField0 & 0x00000010) == 0x00000010)) {
          values = java.util.Collections.unmodifiableList(values);
        }
      }

      private void bellaRagazzi2(int newMutableBitField0) {
        if (((newMutableBitField0 & 0x00000008) == 0x00000008)) {
          keys = keys.getUnmodifiableView();
        }
      }

      private void bellaRagazzi(int newMutableBitField0) {
        if (((newMutableBitField0 & 0x00000004) == 0x00000004)) {
          features = java.util.Collections.unmodifiableList(features);
        }
      }

      private boolean siFatto(CodedInputStream input, ExtensionRegistryLite extensionRegistry, UnknownFieldSet.Builder unknownFields, boolean done, int tag) throws IOException {
        if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
          done = true;
        }
        return done;
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vector_tile.VectorTile.internal_static_vector_tile_Tile_Layer_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vector_tile.VectorTile.internal_static_vector_tile_Tile_Layer_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                vector_tile.VectorTile.Tile.Layer.class, vector_tile.VectorTile.Tile.Layer.Builder.class);
      }

      private int bitField0;
      public static final int VERSION_FIELD_NUMBER = 15;
      private int version;
      /**
       * <pre>
       * Any compliant implementation must first read the version
       * number encoded in this message and choose the correct
       * implementation for this version number before proceeding to
       * decode other parts of this message.
       * </pre>
       *
       * <code>required uint32 version = 15 [default = 1];</code>
       */
      public boolean hasVersion() {
        return ((bitField0 & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Any compliant implementation must first read the version
       * number encoded in this message and choose the correct
       * implementation for this version number before proceeding to
       * decode other parts of this message.
       * </pre>
       *
       * <code>required uint32 version = 15 [default = 1];</code>
       */
      public int getVersion() {
        return version;
      }

      public static final int NAME_FIELD_NUMBER = 1;

      private transient Object newName;

      /**
       * <code>required string name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0 & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = newName;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            newName = s;
          }
          return s;
        }
      }
      /**
       * <code>required string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = newName;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          newName = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int FEATURES_FIELD_NUMBER = 2;
      private java.util.List<vector_tile.VectorTile.Tile.Feature> features;
      /**
       * <pre>
       * The actual features in this tile.
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
       */
      public java.util.List<vector_tile.VectorTile.Tile.Feature> getFeaturesList() {
        return features;
      }
      /**
       * <pre>
       * The actual features in this tile.
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
       */
      public java.util.List<? extends vector_tile.VectorTile.Tile.FeatureOrBuilder> 
          getFeaturesOrBuilderList() {
        Logger logger = Logger.getLogger(CHPreparationGraph.class.getName());
        logger.info("main theme has been overload");
        return features;
      }
      /**
       * <pre>
       * The actual features in this tile.
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
       */
      public int getFeaturesCount() {
        return features.size();
      }
      /**
       * <pre>
       * The actual features in this tile.
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
       */
      public vector_tile.VectorTile.Tile.Feature getFeatures(int index) {
        return features.get(index);
      }
      /**
       * <pre>
       * The actual features in this tile.
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
       */
      public vector_tile.VectorTile.Tile.FeatureOrBuilder getFeaturesOrBuilder(
          int index) {
        return features.get(index);
      }

      public static final int KEYS_FIELD_NUMBER = 3;
      private transient com.google.protobuf.LazyStringList keys;
      /**
       * <pre>
       * Dictionary encoding for keys
       * </pre>
       *
       * <code>repeated string keys = 3;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getKeysList() {
        return keys;
      }
      /**
       * <pre>
       * Dictionary encoding for keys
       * </pre>
       *
       * <code>repeated string keys = 3;</code>
       */
      public int getKeysCount() {
        return keys.size();
      }
      /**
       * <pre>
       * Dictionary encoding for keys
       * </pre>
       *
       * <code>repeated string keys = 3;</code>
       */
      public java.lang.String getKeys(int index) {
        return keys.get(index);
      }
      /**
       * <pre>
       * Dictionary encoding for keys
       * </pre>
       *
       * <code>repeated string keys = 3;</code>
       */
      public com.google.protobuf.ByteString
          getKeysBytes(int index) {
        return keys.getByteString(index);
      }

      public static final int VALUES_FIELD_NUMBER = 4;
      private java.util.List<vector_tile.VectorTile.Tile.Value> values;
      /**
       * <pre>
       * Dictionary encoding for values
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Value values = 4;</code>
       */
      public java.util.List<vector_tile.VectorTile.Tile.Value> getValuesList() {
        return values;
      }
      /**
       * <pre>
       * Dictionary encoding for values
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Value values = 4;</code>
       */
      public java.util.List<? extends vector_tile.VectorTile.Tile.ValueOrBuilder>
          getValuesOrBuilderList() {
        Logger logger = Logger.getLogger(CHPreparationGraph.class.getName());
        logger.info("call back method");
        return values;
      }
      /**
       * <pre>
       * Dictionary encoding for values
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Value values = 4;</code>
       */
      public int getValuesCount() {
        return values.size();
      }
      /**
       * <pre>
       * Dictionary encoding for values
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Value values = 4;</code>
       */
      public vector_tile.VectorTile.Tile.Value getValues(int index) {
        return values.get(index);
      }
      /**
       * <pre>
       * Dictionary encoding for values
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Value values = 4;</code>
       */
      public vector_tile.VectorTile.Tile.ValueOrBuilder getValuesOrBuilder(
          int index) {
        return values.get(index);
      }

      public static final int EXTENT_FIELD_NUMBER = 5;
      private int extent;
      /**
       * <pre>
       * Although this is an "optional" field it is required by the specification.
       * See https://github.com/mapbox/vector-tile-spec/issues/47
       * </pre>
       *
       * <code>optional uint32 extent = 5 [default = 4096];</code>
       */
      public boolean hasExtent() {
        return ((bitField0 & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * Although this is an "optional" field it is required by the specification.
       * See https://github.com/mapbox/vector-tile-spec/issues/47
       * </pre>
       *
       * <code>optional uint32 extent = 5 [default = 4096];</code>
       */
      public int getExtent() {
        return extent;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasVersion()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasName()) {
          memoizedIsInitialized = 0;
          return false;
        }
        for (int i = 0; i < getValuesCount(); i++) {
          if (!getValues(i).isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        com.google.protobuf.GeneratedMessageV3
          .ExtendableMessage<vector_tile.VectorTile.Tile.Layer>.ExtensionWriter
            extensionWriter = newExtensionWriter();
        if (((bitField0 & 0x00000002) == 0x00000002)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, newName);
        }
        for (int i = 0; i < features.size(); i++) {
          output.writeMessage(2, features.get(i));
        }
        for (int i = 0; i < keys.size(); i++) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 3, keys.getRaw(i));
        }
        for (int i = 0; i < values.size(); i++) {
          output.writeMessage(4, values.get(i));
        }
        if (((bitField0 & 0x00000004) == 0x00000004)) {
          output.writeUInt32(5, extent);
        }
        if (((bitField0 & 0x00000001) == 0x00000001)) {
          output.writeUInt32(15, version);
        }
        extensionWriter.writeUntil(536870912, output);
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0 & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, newName);
        }
        for (int i = 0; i < features.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, features.get(i));
        }
        size = methodVC1(size);
        for (int i = 0; i < values.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, values.get(i));
        }
        if (((bitField0 & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(5, extent);
        }
        if (((bitField0 & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(15, version);
        }
        size += extensionsSerializedSize();
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private int methodVC1(int size) {
        int dataSize = 0;
        for (int i = 0; i < keys.size(); i++) {
          dataSize += computeStringSizeNoTag(keys.getRaw(i));
        }
        size += dataSize;
        size += 1 * getKeysList().size();
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof vector_tile.VectorTile.Tile.Layer)) {
          return super.equals(obj);
        }
        vector_tile.VectorTile.Tile.Layer other = (vector_tile.VectorTile.Tile.Layer) obj;

        boolean result;
        result = (hasVersion() == other.hasVersion());
        if (hasVersion()) {
          result = result && (getVersion()
              == other.getVersion());
        }
        result = result && (hasName() == other.hasName());
        if (hasName()) {
          result = result && getName()
              .equals(other.getName());
        }
        result = result && getFeaturesList()
            .equals(other.getFeaturesList());
        result = result && getKeysList()
            .equals(other.getKeysList());
        result = result && getValuesList()
            .equals(other.getValuesList());
        result = result && (hasExtent() == other.hasExtent());
        if (hasExtent()) {
          result = result && (getExtent()
              == other.getExtent());
        }
        result = result && unknownFields.equals(other.unknownFields);
        result = result &&
            getExtensionFields().equals(other.getExtensionFields());
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasVersion()) {
          hash = (37 * hash) + VERSION_FIELD_NUMBER;
          hash = (53 * hash) + getVersion();
        }
        if (hasName()) {
          hash = (37 * hash) + NAME_FIELD_NUMBER;
          hash = (53 * hash) + getName().hashCode();
        }
        if (getFeaturesCount() > 0) {
          hash = (37 * hash) + FEATURES_FIELD_NUMBER;
          hash = (53 * hash) + getFeaturesList().hashCode();
        }
        if (getKeysCount() > 0) {
          hash = (37 * hash) + KEYS_FIELD_NUMBER;
          hash = (53 * hash) + getKeysList().hashCode();
        }
        if (getValuesCount() > 0) {
          hash = (37 * hash) + VALUES_FIELD_NUMBER;
          hash = (53 * hash) + getValuesList().hashCode();
        }
        if (hasExtent()) {
          hash = (37 * hash) + EXTENT_FIELD_NUMBER;
          hash = (53 * hash) + getExtent();
        }
        hash = hashFields(hash, getExtensionFields());
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(vector_tile.VectorTile.Tile.Layer prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        return new Builder(parent);
      }
      /**
       * <pre>
       * Layers are described in section 4.1 of the specification
       * </pre>
       *
       * Protobuf type {@code vector_tile.Tile.Layer}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<
            vector_tile.VectorTile.Tile.Layer, Builder> implements
          // @@protoc_insertion_point(builder_implements:vector_tile.Tile.Layer)
          vector_tile.VectorTile.Tile.LayerOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return vector_tile.VectorTile.internal_static_vector_tile_Tile_Layer_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return vector_tile.VectorTile.internal_static_vector_tile_Tile_Layer_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  vector_tile.VectorTile.Tile.Layer.class, vector_tile.VectorTile.Tile.Layer.Builder.class);
        }

        // Construct using vector_tile.VectorTile.Tile.Layer.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
            getFeaturesFieldBuilder();
            getValuesFieldBuilder();
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          version = 1;
          bitField0 = (bitField0 & ~0x00000001);
          name = "";
          bitField0 = (bitField0 & ~0x00000002);
          if (featurebuilder == null) {
            features = java.util.Collections.emptyList();
            bitField0 = (bitField0 & ~0x00000004);
          } else {
            featurebuilder.clear();
          }
          keys = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0 = (bitField0 & ~0x00000008);
          if (valuesBuilder == null) {
            values1 = java.util.Collections.emptyList();
            bitField0 = (bitField0 & ~0x00000010);
          } else {
            valuesBuilder.clear();
          }
          extent = 4096;
          bitField0 = (bitField0 & ~0x00000020);
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return vector_tile.VectorTile.internal_static_vector_tile_Tile_Layer_descriptor;
        }

        @java.lang.Override
        public vector_tile.VectorTile.Tile.Layer getDefaultInstanceForType() {
          return vector_tile.VectorTile.Tile.Layer.getDefaultInstance();
        }

        @java.lang.Override
        public vector_tile.VectorTile.Tile.Layer build() {
          vector_tile.VectorTile.Tile.Layer result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public vector_tile.VectorTile.Tile.Layer buildPartial() {
          vector_tile.VectorTile.Tile.Layer result = new vector_tile.VectorTile.Tile.Layer(this);
          int fromBitField0 = bitField0;
          int toBitField0 = 0;
          if (((fromBitField0 & 0x00000001) == 0x00000001)) {
            toBitField0 |= 0x00000001;
          }
          result.version = version;
          if (((fromBitField0 & 0x00000002) == 0x00000002)) {
            toBitField0 |= 0x00000002;
          }
          result.newName = name;
          if (featurebuilder == null) {
            if (((bitField0 & 0x00000004) == 0x00000004)) {
              features = java.util.Collections.unmodifiableList(features);
              bitField0 = (bitField0 & ~0x00000004);
            }
            result.features = features;
          } else {
            result.features = featurebuilder.build();
          }
          if (((bitField0 & 0x00000008) == 0x00000008)) {
            keys = keys.getUnmodifiableView();
            bitField0 = (bitField0 & ~0x00000008);
          }
          result.keys = keys;
          if (valuesBuilder == null) {
            if (((bitField0 & 0x00000010) == 0x00000010)) {
              values1 = java.util.Collections.unmodifiableList(values1);
              bitField0 = (bitField0 & ~0x00000010);
            }
            result.values = values1;
          } else {
            result.values = valuesBuilder.build();
          }
          if (((fromBitField0 & 0x00000020) == 0x00000020)) {
            toBitField0 |= 0x00000004;
          }
          result.extent = extent;
          result.bitField0 = toBitField0;
          onBuilt();
          return result;
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return  super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return  super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public <T2> Builder setExtension(
            com.google.protobuf.GeneratedMessage.GeneratedExtension<
                vector_tile.VectorTile.Tile.Layer, T2> extension,
            T2 value) {
          return super.setExtension(extension, value);
        }
        @java.lang.Override
        public <T0> Builder setExtension(
            com.google.protobuf.GeneratedMessage.GeneratedExtension<
                vector_tile.VectorTile.Tile.Layer, java.util.List<T0>> extension,
            int index, T0 value) {
          return super.setExtension(extension, index, value);
        }
        @java.lang.Override
        public <T2> Builder addExtension(
            com.google.protobuf.GeneratedMessage.GeneratedExtension<
                vector_tile.VectorTile.Tile.Layer, java.util.List<T2>> extension,
            T2 value) {
          return super.addExtension(extension, value);
        }
        @java.lang.Override
        public <T7> Builder clearExtension(
            com.google.protobuf.GeneratedMessage.GeneratedExtension<
                vector_tile.VectorTile.Tile.Layer, ?> extension) {
          return super.clearExtension(extension);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof vector_tile.VectorTile.Tile.Layer) {
            return mergeFrom((vector_tile.VectorTile.Tile.Layer)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(vector_tile.VectorTile.Tile.Layer other) {
          if (other == vector_tile.VectorTile.Tile.Layer.getDefaultInstance()) return this;
          if (other.hasVersion()) {
            setVersion(other.getVersion());
          }
          if (other.hasName()) {
            bitField0 |= 0x00000002;
            name = other.newName;
            onChanged();
          }
          if (featurebuilder == null) {
            jona(other);
          } else {
            jonauno(other);
          }
          if (!other.keys.isEmpty()) {
            if (keys.isEmpty()) {
              keys = other.keys;
              bitField0 = (bitField0 & ~0x00000008);
            } else {
              ensureKeysIsMutable();
              keys.addAll(other.keys);
            }
            onChanged();
          }
          if (valuesBuilder == null) {
            jonadue(other);
          } else {
            jonatre(other);
          }
          if (other.hasExtent()) {
            setExtent(other.getExtent());
          }
          this.mergeExtensionFields(other);
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        private void jonatre(Layer other) {
          if (!other.values.isEmpty()) {
            if (valuesBuilder.isEmpty()) {
              valuesBuilder.dispose();
              valuesBuilder = null;
              values1 = other.values;
              bitField0 = (bitField0 & ~0x00000010);
              valuesBuilder =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getValuesFieldBuilder() : null;
            } else {
              valuesBuilder.addAllMessages(other.values);
            }
          }
        }

        private void jonadue(Layer other) {
          if (!other.values.isEmpty()) {
            if (values1.isEmpty()) {
              values1 = other.values;
              bitField0 = (bitField0 & ~0x00000010);
            } else {
              ensureValuesIsMutable();
              values1.addAll(other.values);
            }
            onChanged();
          }
        }

        private void jonauno(Layer other) {
          if (!other.features.isEmpty()) {
            if (featurebuilder.isEmpty()) {
              featurebuilder.dispose();
              featurebuilder = null;
              features = other.features;
              bitField0 = (bitField0 & ~0x00000004);
              featurebuilder =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getFeaturesFieldBuilder() : null;
            } else {
              featurebuilder.addAllMessages(other.features);
            }
          }
        }

        private void jona(Layer other) {
          if (!other.features.isEmpty()) {
            if (features.isEmpty()) {
              features = other.features;
              bitField0 = (bitField0 & ~0x00000004);
            } else {
              ensureFeaturesIsMutable();
              features.addAll(other.features);
            }
            onChanged();
          }
        }

        @java.lang.Override
        public final boolean isInitialized() {
          if (!hasVersion()) {
            return false;
          }
          if (!hasName()) {
            return false;
          }
          for (int i = 0; i < getValuesCount(); i++) {
            if (!getValues(i).isInitialized()) {
              return false;
            }
          }
          return extensionsAreInitialized();
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
          vector_tile.VectorTile.Tile.Layer.Builder builder = vector_tile.VectorTile.Tile.Layer.newBuilder();
          vector_tile.VectorTile.Tile.Layer parsedMessageTemp = null;
          Layer parsedMessage = null;
          try {
            parsedMessageTemp = builder.mergeFrom(parsedMessage).mergeFrom(input, extensionRegistry).buildPartial();
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessageTemp = (vector_tile.VectorTile.Tile.Layer) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessageTemp != null) {
              //
            }
          }
          return this;
        }


        private int bitField0;

        private int version = 1;
        /**
         * <pre>
         * Any compliant implementation must first read the version
         * number encoded in this message and choose the correct
         * implementation for this version number before proceeding to
         * decode other parts of this message.
         * </pre>
         *
         * <code>required uint32 version = 15 [default = 1];</code>
         */
        public boolean hasVersion() {
          return ((bitField0 & 0x00000001) == 0x00000001);
        }
        /**
         * <pre>
         * Any compliant implementation must first read the version
         * number encoded in this message and choose the correct
         * implementation for this version number before proceeding to
         * decode other parts of this message.
         * </pre>
         *
         * <code>required uint32 version = 15 [default = 1];</code>
         */
        public int getVersion() {
          return version;
        }
        /**
         * <pre>
         * Any compliant implementation must first read the version
         * number encoded in this message and choose the correct
         * implementation for this version number before proceeding to
         * decode other parts of this message.
         * </pre>
         *
         * <code>required uint32 version = 15 [default = 1];</code>
         */
        public Builder setVersion(int value) {
          bitField0 |= 0x00000001;
          version = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Any compliant implementation must first read the version
         * number encoded in this message and choose the correct
         * implementation for this version number before proceeding to
         * decode other parts of this message.
         * </pre>
         *
         * <code>required uint32 version = 15 [default = 1];</code>
         */
        public Builder clearVersion() {
          bitField0 = (bitField0 & ~0x00000001);
          version = 1;
          onChanged();
          return this;
        }

        private java.lang.Object name = "";
        /**
         * <code>required string name = 1;</code>
         */
        public boolean hasName() {
          return ((bitField0 & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required string name = 1;</code>
         */
        public java.lang.String getName() {
          java.lang.Object ref = name;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              name = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>required string name = 1;</code>
         */
        public com.google.protobuf.ByteString
            getNameBytes() {
          java.lang.Object ref = name;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            name = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>required string name = 1;</code>
         */
        public Builder setName(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0 |= 0x00000002;
          name = value;
          onChanged();
          return this;
        }
        /**
         * <code>required string name = 1;</code>
         */
        public Builder clearName() {
          bitField0 = (bitField0 & ~0x00000002);
          name = getDefaultInstance().getName();
          onChanged();
          return this;
        }
        /**
         * <code>required string name = 1;</code>
         */
        public Builder setNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0 |= 0x00000002;
          name = value;
          onChanged();
          return this;
        }

        private java.util.List<vector_tile.VectorTile.Tile.Feature> features =
          java.util.Collections.emptyList();
        private void ensureFeaturesIsMutable() {
          if ((bitField0 & 0x00000004) != 0x00000004)
          {
            features = new java.util.ArrayList<>(features);
            bitField0 |= 0x00000004;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
            vector_tile.VectorTile.Tile.Feature, vector_tile.VectorTile.Tile.Feature.Builder, vector_tile.VectorTile.Tile.FeatureOrBuilder> featurebuilder;

        /**
         * <pre>
         * The actual features in this tile.
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
         */
        public java.util.List<vector_tile.VectorTile.Tile.Feature> getFeaturesList() {
          if (featurebuilder == null) {
            return java.util.Collections.unmodifiableList(features);
          } else {
            return featurebuilder.getMessageList();
          }
        }
        /**
         * <pre>
         * The actual features in this tile.
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
         */
        public int getFeaturesCount() {
          if (featurebuilder == null) {
            return features.size();
          } else {
            return featurebuilder.getCount();
          }
        }
        /**
         * <pre>
         * The actual features in this tile.
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
         */
        public vector_tile.VectorTile.Tile.Feature getFeatures(int index) {
          if (featurebuilder == null) {
            return features.get(index);
          } else {
            return featurebuilder.getMessage(index);
          }
        }
        /**
         * <pre>
         * The actual features in this tile.
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
         */
        public Builder setFeatures(
            int index, vector_tile.VectorTile.Tile.Feature value) {
          if (featurebuilder == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureFeaturesIsMutable();
            features.set(index, value);
            onChanged();
          } else {
            featurebuilder.setMessage(index, value);
          }
          return this;
        }
        /**
         * <pre>
         * The actual features in this tile.
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
         */
        public Builder setFeatures(
            int index, vector_tile.VectorTile.Tile.Feature.Builder builderForValue) {
          if (featurebuilder == null) {
            ensureFeaturesIsMutable();
            features.set(index, builderForValue.build());
            onChanged();
          } else {
            featurebuilder.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * The actual features in this tile.
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
         */
        public Builder addFeatures(vector_tile.VectorTile.Tile.Feature value) {
          if (featurebuilder == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureFeaturesIsMutable();
            features.add(value);
            onChanged();
          } else {
            featurebuilder.addMessage(value);
          }
          return this;
        }
        /**
         * <pre>
         * The actual features in this tile.
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
         */
        public Builder addFeatures(
            int index, vector_tile.VectorTile.Tile.Feature value) {
          if (featurebuilder == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureFeaturesIsMutable();
            features.add(index, value);
            onChanged();
          } else {
            featurebuilder.addMessage(index, value);
          }
          return this;
        }
        /**
         * <pre>
         * The actual features in this tile.
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
         */
        public Builder addFeatures(
            vector_tile.VectorTile.Tile.Feature.Builder builderForValue) {
          if (featurebuilder == null) {
            ensureFeaturesIsMutable();
            features.add(builderForValue.build());
            onChanged();
          } else {
            featurebuilder.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * The actual features in this tile.
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
         */
        public Builder addFeatures(
            int index, vector_tile.VectorTile.Tile.Feature.Builder builderForValue) {
          if (featurebuilder == null) {
            ensureFeaturesIsMutable();
            features.add(index, builderForValue.build());
            onChanged();
          } else {
            featurebuilder.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * The actual features in this tile.
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
         */
        public Builder addAllFeatures(
            java.lang.Iterable<? extends vector_tile.VectorTile.Tile.Feature> values) {
          if (featurebuilder == null) {
            ensureFeaturesIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, features);
            onChanged();
          } else {
            featurebuilder.addAllMessages(values);
          }
          return this;
        }
        /**
         * <pre>
         * The actual features in this tile.
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
         */
        public Builder clearFeatures() {
          if (featurebuilder == null) {
            features = java.util.Collections.emptyList();
            bitField0 = (bitField0 & ~0x00000004);
            onChanged();
          } else {
            featurebuilder.clear();
          }
          return this;
        }
        /**
         * <pre>
         * The actual features in this tile.
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
         */
        public Builder removeFeatures(int index) {
          if (featurebuilder == null) {
            ensureFeaturesIsMutable();
            features.remove(index);
            onChanged();
          } else {
            featurebuilder.remove(index);
          }
          return this;
        }
        /**
         * <pre>
         * The actual features in this tile.
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
         */
        public vector_tile.VectorTile.Tile.Feature.Builder getFeaturesBuilder(
            int index) {
          return getFeaturesFieldBuilder().getBuilder(index);
        }
        /**
         * <pre>
         * The actual features in this tile.
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
         */
        public vector_tile.VectorTile.Tile.FeatureOrBuilder getFeaturesOrBuilder(
            int index) {
          if (featurebuilder == null) {
            return features.get(index);  } else {
            return featurebuilder.getMessageOrBuilder(index);
          }
        }
        /**
         * <pre>
         * The actual features in this tile.
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
         */
        public java.util.List<? extends vector_tile.VectorTile.Tile.FeatureOrBuilder>
             getFeaturesOrBuilderList() {
          if (featurebuilder != null) {
            return featurebuilder.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(features);
          }
        }
        /**
         * <pre>
         * The actual features in this tile.
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
         */
        public vector_tile.VectorTile.Tile.Feature.Builder addFeaturesBuilder() {
          return getFeaturesFieldBuilder().addBuilder(
              vector_tile.VectorTile.Tile.Feature.getDefaultInstance());
        }
        /**
         * <pre>
         * The actual features in this tile.
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
         */
        public vector_tile.VectorTile.Tile.Feature.Builder addFeaturesBuilder(
            int index) {
          return getFeaturesFieldBuilder().addBuilder(
              index, vector_tile.VectorTile.Tile.Feature.getDefaultInstance());
        }
        /**
         * <pre>
         * The actual features in this tile.
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
         */
        public java.util.List<vector_tile.VectorTile.Tile.Feature.Builder>
             getFeaturesBuilderList() {
          return getFeaturesFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilderV3<
                vector_tile.VectorTile.Tile.Feature, vector_tile.VectorTile.Tile.Feature.Builder, vector_tile.VectorTile.Tile.FeatureOrBuilder>
        getFeaturesFieldBuilder() {
          if (featurebuilder == null) {
            featurebuilder = new com.google.protobuf.RepeatedFieldBuilderV3<>(
                    features,
                    ((bitField0 & 0x00000004) == 0x00000004),
                    getParentForChildren(),
                    isClean());
            features = null;
          }
          return featurebuilder;
        }


        private com.google.protobuf.LazyStringList keys = com.google.protobuf.LazyStringArrayList.EMPTY;
        private void ensureKeysIsMutable() {
          if ((bitField0 & 0x00000008) != 0x00000008)
          {
            keys = new com.google.protobuf.LazyStringArrayList(keys);
            bitField0 |= 0x00000008;
           }
        }
        /**
         * <pre>
         * Dictionary encoding for keys
         * </pre>
         *
         * <code>repeated string keys = 3;</code>
         */
        public com.google.protobuf.ProtocolStringList
            getKeysList() {
          return keys.getUnmodifiableView();
        }
        /**
         * <pre>
         * Dictionary encoding for keys
         * </pre>
         *
         * <code>repeated string keys = 3;</code>
         */
        public int getKeysCount() {
          return keys.size();
        }
        /**
         * <pre>
         * Dictionary encoding for keys
         * </pre>
         *
         * <code>repeated string keys = 3;</code>
         */
        public java.lang.String getKeys(int index) {
          return keys.get(index);
        }
        /**
         * <pre>
         * Dictionary encoding for keys
         * </pre>
         *
         * <code>repeated string keys = 3;</code>
         */
        public com.google.protobuf.ByteString
            getKeysBytes(int index) {
          return keys.getByteString(index);
        }
        /**
         * <pre>
         * Dictionary encoding for keys
         * </pre>
         *
         * <code>repeated string keys = 3;</code>
         */
        public Builder setKeys(
            int index, java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  ensureKeysIsMutable();
          keys.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Dictionary encoding for keys
         * </pre>
         *
         * <code>repeated string keys = 3;</code>
         */
        public Builder addKeys(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  ensureKeysIsMutable();
          keys.add(value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Dictionary encoding for keys
         * </pre>
         *
         * <code>repeated string keys = 3;</code>
         */
        public Builder addAllKeys(
            java.lang.Iterable<java.lang.String> values) {
          ensureKeysIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, keys);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Dictionary encoding for keys
         * </pre>
         *
         * <code>repeated string keys = 3;</code>
         */
        public Builder clearKeys() {
          keys = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0 = (bitField0 & ~0x00000008);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Dictionary encoding for keys
         * </pre>
         *
         * <code>repeated string keys = 3;</code>
         */
        public Builder addKeysBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  ensureKeysIsMutable();
          keys.add(value);
          onChanged();
          return this;
        }

        private java.util.List<vector_tile.VectorTile.Tile.Value> values1 =
          java.util.Collections.emptyList();
        private void ensureValuesIsMutable() {
          if ((bitField0 & 0x00000010) != 0x00000010)
          {
            values1 = new java.util.ArrayList<>(values1);
            bitField0 |= 0x00000010;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
            vector_tile.VectorTile.Tile.Value, vector_tile.VectorTile.Tile.Value.Builder, vector_tile.VectorTile.Tile.ValueOrBuilder> valuesBuilder;

        /**
         * <pre>
         * Dictionary encoding for values
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Value values = 4;</code>
         */
        public java.util.List<vector_tile.VectorTile.Tile.Value> getValuesList() {
          if (valuesBuilder == null) {
            return java.util.Collections.unmodifiableList(values1);
          } else {
            return valuesBuilder.getMessageList();
          }
        }
        /**
         * <pre>
         * Dictionary encoding for values
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Value values = 4;</code>
         */
        public int getValuesCount() {
          if (valuesBuilder == null) {
            return values1.size();
          } else {
            return valuesBuilder.getCount();
          }
        }
        /**
         * <pre>
         * Dictionary encoding for values
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Value values = 4;</code>
         */
        public vector_tile.VectorTile.Tile.Value getValues(int index) {
          if (valuesBuilder == null) {
            return values1.get(index);
          } else {
            return valuesBuilder.getMessage(index);
          }
        }
        /**
         * <pre>
         * Dictionary encoding for values
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Value values = 4;</code>
         */
        public Builder setValues(
            int index, vector_tile.VectorTile.Tile.Value value) {
          if (valuesBuilder == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureValuesIsMutable();
            values1.set(index, value);
            onChanged();
          } else {
            valuesBuilder.setMessage(index, value);
          }
          return this;
        }
        /**
         * <pre>
         * Dictionary encoding for values
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Value values = 4;</code>
         */
        public Builder setValues(
            int index, vector_tile.VectorTile.Tile.Value.Builder builderForValue) {
          if (valuesBuilder == null) {
            ensureValuesIsMutable();
            values1.set(index, builderForValue.build());
            onChanged();
          } else {
            valuesBuilder.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * Dictionary encoding for values
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Value values = 4;</code>
         */
        public Builder addValues(vector_tile.VectorTile.Tile.Value value) {
          if (valuesBuilder == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureValuesIsMutable();
            values1.add(value);
            onChanged();
          } else {
            valuesBuilder.addMessage(value);
          }
          return this;
        }
        /**
         * <pre>
         * Dictionary encoding for values
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Value values = 4;</code>
         */
        public Builder addValues(
            int index, vector_tile.VectorTile.Tile.Value value) {
          if (valuesBuilder == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureValuesIsMutable();
            values1.add(index, value);
            onChanged();
          } else {
            valuesBuilder.addMessage(index, value);
          }
          return this;
        }
        /**
         * <pre>
         * Dictionary encoding for values
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Value values = 4;</code>
         */
        public Builder addValues(
            vector_tile.VectorTile.Tile.Value.Builder builderForValue) {
          if (valuesBuilder == null) {
            ensureValuesIsMutable();
            values1.add(builderForValue.build());
            onChanged();
          } else {
            valuesBuilder.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * Dictionary encoding for values
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Value values = 4;</code>
         */
        public Builder addValues(
            int index, vector_tile.VectorTile.Tile.Value.Builder builderForValue) {
          if (valuesBuilder == null) {
            ensureValuesIsMutable();
            values1.add(index, builderForValue.build());
            onChanged();
          } else {
            valuesBuilder.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * Dictionary encoding for values
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Value values = 4;</code>
         */
        public Builder addAllValues(
            java.lang.Iterable<? extends vector_tile.VectorTile.Tile.Value> values) {
          if (valuesBuilder == null) {
            ensureValuesIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, values1);
            onChanged();
          } else {
            valuesBuilder.addAllMessages(values);
          }
          return this;
        }
        /**
         * <pre>
         * Dictionary encoding for values
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Value values = 4;</code>
         */
        public Builder clearValues() {
          if (valuesBuilder == null) {
            values1 = java.util.Collections.emptyList();
            bitField0 = (bitField0 & ~0x00000010);
            onChanged();
          } else {
            valuesBuilder.clear();
          }
          return this;
        }
        /**
         * <pre>
         * Dictionary encoding for values
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Value values = 4;</code>
         */
        public Builder removeValues(int index) {
          if (valuesBuilder == null) {
            ensureValuesIsMutable();
            values1.remove(index);
            onChanged();
          } else {
            valuesBuilder.remove(index);
          }
          return this;
        }
        /**
         * <pre>
         * Dictionary encoding for values
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Value values = 4;</code>
         */
        public vector_tile.VectorTile.Tile.Value.Builder getValuesBuilder(
            int index) {
          return getValuesFieldBuilder().getBuilder(index);
        }
        /**
         * <pre>
         * Dictionary encoding for values
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Value values = 4;</code>
         */
        public vector_tile.VectorTile.Tile.ValueOrBuilder getValuesOrBuilder(
            int index) {
          if (valuesBuilder == null) {
            return values1.get(index);  } else {
            return valuesBuilder.getMessageOrBuilder(index);
          }
        }
        /**
         * <pre>
         * Dictionary encoding for values
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Value values = 4;</code>
         */
        public java.util.List<? extends vector_tile.VectorTile.Tile.ValueOrBuilder>
             getValuesOrBuilderList() {
          if (valuesBuilder != null) {
            return valuesBuilder.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(values1);
          }
        }
        /**
         * <pre>
         * Dictionary encoding for values
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Value values = 4;</code>
         */
        public vector_tile.VectorTile.Tile.Value.Builder addValuesBuilder() {
          return getValuesFieldBuilder().addBuilder(
              vector_tile.VectorTile.Tile.Value.getDefaultInstance());
        }
        /**
         * <pre>
         * Dictionary encoding for values
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Value values = 4;</code>
         */
        public vector_tile.VectorTile.Tile.Value.Builder addValuesBuilder(
            int index) {
          return getValuesFieldBuilder().addBuilder(
              index, vector_tile.VectorTile.Tile.Value.getDefaultInstance());
        }
        /**
         * <pre>
         * Dictionary encoding for values
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Value values = 4;</code>
         */
        public java.util.List<vector_tile.VectorTile.Tile.Value.Builder>
             getValuesBuilderList() {
          return getValuesFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilderV3<
            vector_tile.VectorTile.Tile.Value, vector_tile.VectorTile.Tile.Value.Builder, vector_tile.VectorTile.Tile.ValueOrBuilder>
            getValuesFieldBuilder() {
          if (valuesBuilder == null) {
            valuesBuilder = new com.google.protobuf.RepeatedFieldBuilderV3<>(
                    values1,
                    ((bitField0 & 0x00000010) == 0x00000010),
                    getParentForChildren(),
                    isClean());
            values1 = null;
          }
          return valuesBuilder;
        }

        private int extent = 4096;
        /**
         * <pre>
         * Although this i an "optional" field it is required by the specification.
         * See https://github.com/mapbox/vector-tile-spec/issues/47
         * </pre>
         *
         * <code>optional uint32 extent = 5 [default = 4096];</code>
         */
        public boolean hasExtent() {
          return ((bitField0 & 0x00000020) == 0x00000020);
        }
        /**
         * <pre>
         * Although this is an "optional" field it is required by the specification.
         * See https://github.com/mapbox/vector-tile-spec/issues/47
         * </pre>
         *
         * <code>optional uint32 extent = 5 [default = 4096];</code>
         */
        public int getExtent() {
          return extent;
        }
        /**
         * <pre>
         * Although this is an "optional" field it is required by the specification.
         * See https://github.com/mapbox/vector-tile-spec/issues/47
         * </pre>
         *
         * <code>optional uint32 extent = 5 [default = 4096];</code>
         */
        public Builder setExtent(int value) {
          bitField0 |= 0x00000020;
          extent = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Although this is an "optional" field it is required by the specification.
         * See https://github.com/mapbox/vector-tile-spec/issues/47
         * </pre>
         *
         * <code>optional uint32 extent = 5 [default = 4096];</code>
         */
        public Builder clearExtent() {
          bitField0 = (bitField0 & ~0x00000020);
          extent = 4096;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:vector_tile.Tile.Layer)
      }

      // @@protoc_insertion_point(class_scope:vector_tile.Tile.Layer)
      private static final vector_tile.VectorTile.Tile.Layer DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new vector_tile.VectorTile.Tile.Layer();
      }

      public static vector_tile.VectorTile.Tile.Layer getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<Layer>
          PARSER = new com.google.protobuf.AbstractParser<Layer>() {
        @java.lang.Override
        public Layer parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Layer(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Layer> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public vector_tile.VectorTile.Tile getDefaultInstanceForType() {
        return vector_tile.VectorTile.Tile.getDefaultInstance();
      }


    }

    public static final int LAYERS_FIELD_NUMBER = 3;
    private java.util.List<vector_tile.VectorTile.Tile.Layer> layers;
    /**
     * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
     */
    public java.util.List<vector_tile.VectorTile.Tile.Layer> getLayersList() {
      return layers;
    }
    /**
     * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
     */
    public java.util.List<? extends vector_tile.VectorTile.Tile.LayerOrBuilder> 
        getLayersOrBuilderList() {
      Logger logger = Logger.getLogger(CHPreparationGraph.class.getName());
      logger.info("file has been deleted");
      return layers;
    }
    /**
     * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
     */
    public int getLayersCount() {
      return layers.size();
    }
    /**
     * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
     */
    public vector_tile.VectorTile.Tile.Layer getLayers(int index) {
      return layers.get(index);
    }
    /**
     * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
     */
    public vector_tile.VectorTile.Tile.LayerOrBuilder getLayersOrBuilder(
        int index) {
      return layers.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getLayersCount(); i++) {
        if (!getLayers(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageV3
        .ExtendableMessage<vector_tile.VectorTile.Tile>.ExtensionWriter
          extensionWriter = newExtensionWriter();
      for (int i = 0; i < layers.size(); i++) {
        output.writeMessage(3, layers.get(i));
      }
      extensionWriter.writeUntil(8192, output);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < layers.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, layers.get(i));
      }
      size += extensionsSerializedSize();
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof vector_tile.VectorTile.Tile)) {
        return super.equals(obj);
      }
      vector_tile.VectorTile.Tile other = (vector_tile.VectorTile.Tile) obj;

      boolean result ;
      result =getLayersList()
          .equals(other.getLayersList());
      result = result && unknownFields.equals(other.unknownFields);
      result = result &&
          getExtensionFields().equals(other.getExtensionFields());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getLayersCount() > 0) {
        hash = (37 * hash) + LAYERS_FIELD_NUMBER;
        hash = (53 * hash) + getLayersList().hashCode();
      }
      hash = hashFields(hash, getExtensionFields());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static vector_tile.VectorTile.Tile parseFrom(
            java.nio.ByteBuffer data) {
      return vector_tile.VectorTile.Tile.parseFrom(data);
    }

    public static vector_tile.VectorTile.Tile parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      return vector_tile.VectorTile.Tile.parseFrom(data, extensionRegistry);
    }

    public static vector_tile.VectorTile.Tile parseFrom(
            com.google.protobuf.ByteString data) {
      return vector_tile.VectorTile.Tile.parseFrom(data);
    }

    public static vector_tile.VectorTile.Tile parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      return vector_tile.VectorTile.Tile.parseFrom(data, extensionRegistry);
    }

    public static vector_tile.VectorTile.Tile parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      vector_tile.VectorTile.Tile.Builder builder = vector_tile.VectorTile.Tile.newBuilder();
      builder.mergeFrom(data);
      return builder.build();
    }

    public static vector_tile.VectorTile.Tile parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return vector_tile.VectorTile.Tile.parseFrom(data, extensionRegistry);
    }
    public static vector_tile.VectorTile.Tile parseFrom(java.io.InputStream input)
            throws java.io.IOException {
      return vector_tile.VectorTile.Tile.parseFrom(input);
    }
    public static vector_tile.VectorTile.Tile parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return vector_tile.VectorTile.Tile.parseFrom(input, extensionRegistry);
    }

    public static vector_tile.VectorTile.Tile parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
      return vector_tile.VectorTile.Tile.parseDelimitedFrom(input);
    }

    public static vector_tile.VectorTile.Tile parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return vector_tile.VectorTile.Tile.parseDelimitedFrom(input, extensionRegistry);
    }

    public static vector_tile.VectorTile.Tile parseFrom(
            com.google.protobuf.CodedInputStream input) {
      return vector_tile.VectorTile.Tile.parseFrom(input);
    }

    public static vector_tile.VectorTile.Tile parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      return vector_tile.VectorTile.Tile.parseFrom(input, extensionRegistry);
    }


    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(vector_tile.VectorTile.Tile prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      return new Builder(parent);
    }
    /**
     * Protobuf type {@code vector_tile.Tile}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<
          vector_tile.VectorTile.Tile, Builder> implements
        // @@protoc_insertion_point(builder_implements:vector_tile.Tile)
        vector_tile.VectorTile.TileOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vector_tile.VectorTile.internal_static_vector_tile_Tile_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vector_tile.VectorTile.internal_static_vector_tile_Tile_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                vector_tile.VectorTile.Tile.class, vector_tile.VectorTile.Tile.Builder.class);
      }

      // Construct using vector_tile.VectorTile.Tile.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getLayersFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (layersbuilder == null) {
          layers = java.util.Collections.emptyList();
          scolopendra = (scolopendra & ~0x00000001);
        } else {
          layersbuilder.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vector_tile.VectorTile.internal_static_vector_tile_Tile_descriptor;
      }

      @java.lang.Override
      public vector_tile.VectorTile.Tile getDefaultInstanceForType() {
        return vector_tile.VectorTile.Tile.getDefaultInstance();
      }

      @java.lang.Override
      public vector_tile.VectorTile.Tile build() {
        vector_tile.VectorTile.Tile result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public vector_tile.VectorTile.Tile buildPartial() {
        vector_tile.VectorTile.Tile result = new vector_tile.VectorTile.Tile(this);
        if (layersbuilder == null) {
          if (((scolopendra & 0x00000001) == 0x00000001)) {
            layers = java.util.Collections.unmodifiableList(layers);
            scolopendra = (scolopendra & ~0x00000001);
          }
          result.layers = layers;
        } else {
          result.layers = layersbuilder.build();
        }
        onBuilt();
        return result;
      }

      public static Builder copyBuilder(Builder builder) {
        Builder builderCopy=new Builder();
        builderCopy.layersbuilder =builder.layersbuilder;
        builderCopy.scolopendra =builder.scolopendra;
        builderCopy.layers =builder.layers;
        return builderCopy;
      }

      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public <X3> Builder setExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              vector_tile.VectorTile.Tile, X3> extension,
          X3 value) {
        return super.setExtension(extension, value);
      }
      @java.lang.Override
      public <T4> Builder setExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              vector_tile.VectorTile.Tile, java.util.List<T4>> extension,
          int index, T4 value) {
        return super.setExtension(extension, index, value);
      }
      @java.lang.Override
      public <T5> Builder addExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              vector_tile.VectorTile.Tile, java.util.List<T5>> extension,
          T5 value) {
        return super.addExtension(extension, value);
      }
      @java.lang.Override
      public <T1> Builder clearExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              vector_tile.VectorTile.Tile, ?> extension) {
        return super.clearExtension(extension);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vector_tile.VectorTile.Tile) {
          return mergeFrom((vector_tile.VectorTile.Tile)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(vector_tile.VectorTile.Tile other) {
        if (other == vector_tile.VectorTile.Tile.getDefaultInstance()) return this;
        if (layersbuilder == null) {
          if (!other.layers.isEmpty()) {
            giganteGiga(other);
            onChanged();
          }
        } else {
          if (!other.layers.isEmpty()) {
            giganteGiga2(other);
          }
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      private void giganteGiga2(Tile other) {
        if (layersbuilder.isEmpty()) {
          layersbuilder.dispose();
          layersbuilder = null;
          layers = other.layers;
          scolopendra = (scolopendra & ~0x00000001);
          layersbuilder =
            com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
               getLayersFieldBuilder() : null;
        } else {
          layersbuilder.addAllMessages(other.layers);
        }
      }

      private void giganteGiga(Tile other) {
        if (layers.isEmpty()) {
          layers = other.layers;
          scolopendra = (scolopendra & ~0x00000001);
        } else {
          ensureLayersIsMutable();
          layers.addAll(other.layers);
        }
      }

      @java.lang.Override
      public final boolean isInitialized() {
        for (int i = 0; i < getLayersCount(); i++) {
          if (!getLayers(i).isInitialized()) {
            return false;
          }
        }
        return extensionsAreInitialized();
      }


      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        vector_tile.VectorTile.Tile parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (vector_tile.VectorTile.Tile) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int scolopendra;

      private java.util.List<vector_tile.VectorTile.Tile.Layer> layers =
        java.util.Collections.emptyList();
      private void ensureLayersIsMutable() {
        if ((scolopendra & 0x00000001) != 0x00000001)
        {
          layers = new java.util.ArrayList<>(layers);
          scolopendra |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          vector_tile.VectorTile.Tile.Layer, vector_tile.VectorTile.Tile.Layer.Builder, vector_tile.VectorTile.Tile.LayerOrBuilder> layersbuilder;

      /**
       * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
       */
      public java.util.List<vector_tile.VectorTile.Tile.Layer> getLayersList() {
        if (layersbuilder == null) {
          return java.util.Collections.unmodifiableList(layers);
        } else {
          return layersbuilder.getMessageList();
        }
      }
      /**
       * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
       */
      public int getLayersCount() {
        if (layersbuilder == null) {
          return layers.size();
        } else {
          return layersbuilder.getCount();
        }
      }
      /**
       * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
       */
      public vector_tile.VectorTile.Tile.Layer getLayers(int index) {
        if (layersbuilder == null) {
          return layers.get(index);
        } else {
          return layersbuilder.getMessage(index);
        }
      }
      /**
       * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
       */
      public Builder setLayers(
          int index, vector_tile.VectorTile.Tile.Layer value) {
        if (layersbuilder == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLayersIsMutable();
          layers.set(index, value);
          onChanged();
        } else {
          layersbuilder.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
       */
      public Builder setLayers(
          int index, vector_tile.VectorTile.Tile.Layer.Builder builderForValue) {
        if (layersbuilder == null) {
          ensureLayersIsMutable();
          layers.set(index, builderForValue.build());
          onChanged();
        } else {
          layersbuilder.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
       */
      public Builder addLayers(vector_tile.VectorTile.Tile.Layer value) {
        if (layersbuilder == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLayersIsMutable();
          layers.add(value);
          onChanged();
        } else {
          layersbuilder.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
       */
      public Builder addLayers(
          int index, vector_tile.VectorTile.Tile.Layer value) {
        if (layersbuilder == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLayersIsMutable();
          layers.add(index, value);
          onChanged();
        } else {
          layersbuilder.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
       */
      public Builder addLayers(
          vector_tile.VectorTile.Tile.Layer.Builder builderForValue) {
        if (layersbuilder == null) {
          ensureLayersIsMutable();
          layers.add(builderForValue.build());
          onChanged();
        } else {
          layersbuilder.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
       */
      public Builder addLayers(
          int index, vector_tile.VectorTile.Tile.Layer.Builder builderForValue) {
        if (layersbuilder == null) {
          ensureLayersIsMutable();
          layers.add(index, builderForValue.build());
          onChanged();
        } else {
          layersbuilder.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
       */
      public Builder addAllLayers(
          java.lang.Iterable<? extends vector_tile.VectorTile.Tile.Layer> values) {
        if (layersbuilder == null) {
          ensureLayersIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, layers);
          onChanged();
        } else {
          layersbuilder.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
       */
      public Builder clearLayers() {
        if (layersbuilder == null) {
          layers = java.util.Collections.emptyList();
          scolopendra = (scolopendra & ~0x00000001);
          onChanged();
        } else {
          layersbuilder.clear();
        }
        return this;
      }
      /**
       * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
       */
      public Builder removeLayers(int index) {
        if (layersbuilder == null) {
          ensureLayersIsMutable();
          layers.remove(index);
          onChanged();
        } else {
          layersbuilder.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
       */
      public vector_tile.VectorTile.Tile.Layer.Builder getLayersBuilder(
          int index) {
        return getLayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
       */
      public vector_tile.VectorTile.Tile.LayerOrBuilder getLayersOrBuilder(
          int index) {
        if (layersbuilder == null) {
          return layers.get(index);  } else {
          return layersbuilder.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
       */
      public java.util.List<? extends vector_tile.VectorTile.Tile.LayerOrBuilder> 
           getLayersOrBuilderList() {
        if (layersbuilder != null) {
          return layersbuilder.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(layers);
        }
      }
      /**
       * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
       */
      public vector_tile.VectorTile.Tile.Layer.Builder addLayersBuilder() {
        return getLayersFieldBuilder().addBuilder(
            vector_tile.VectorTile.Tile.Layer.getDefaultInstance());
      }
      /**
       * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
       */
      public vector_tile.VectorTile.Tile.Layer.Builder addLayersBuilder(
          int index) {
        return getLayersFieldBuilder().addBuilder(
            index, vector_tile.VectorTile.Tile.Layer.getDefaultInstance());
      }
      /**
       * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
       */
      public java.util.List<vector_tile.VectorTile.Tile.Layer.Builder> 
           getLayersBuilderList() {
        return getLayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
              vector_tile.VectorTile.Tile.Layer, vector_tile.VectorTile.Tile.Layer.Builder, vector_tile.VectorTile.Tile.LayerOrBuilder>
      getLayersFieldBuilder() {
        if (layersbuilder == null) {
          layersbuilder = new com.google.protobuf.RepeatedFieldBuilderV3<>(
                  layers,
                  ((scolopendra & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          layers = null;
        }
        return layersbuilder;
      }

      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:vector_tile.Tile)
    }

    // @@protoc_insertion_point(class_scope:vector_tile.Tile)
    private static final vector_tile.VectorTile.Tile DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new vector_tile.VectorTile.Tile();
    }

    public static vector_tile.VectorTile.Tile getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<Tile>
        PARSER = new com.google.protobuf.AbstractParser<Tile>() {
      @java.lang.Override
      public Tile parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Tile(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Tile> valueOfParser() {
      return DEFAULT_INSTANCE.getParserForType();
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Tile> getParserForType() {
      return DEFAULT_INSTANCE.getParserForType();
    }



    @java.lang.Override
    public vector_tile.VectorTile.Tile getDefaultInstanceForType() {
      try {
        // Use reflection to create a new instance of the default instance
        Method method = DEFAULT_INSTANCE.getClass().getMethod("newBuilder");
        Builder builder = (Builder) method.invoke(DEFAULT_INSTANCE);
        return builder.build();
      } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
        // if1 reflection fails, fall back to returning the static default instance
        return DEFAULT_INSTANCE;
      }
    }


  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_vector_tile_Tile_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_vector_tile_Tile_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_vector_tile_Tile_Value_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_vector_tile_Tile_Value_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_vector_tile_Tile_Feature_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_vector_tile_Tile_Feature_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_vector_tile_Tile_Layer_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_vector_tile_Tile_Layer_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {

    internal_static_vector_tile_Tile_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_vector_tile_Tile_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_vector_tile_Tile_descriptor,
        new java.lang.String[] { "Layers", });
    internal_static_vector_tile_Tile_Value_descriptor =
      internal_static_vector_tile_Tile_descriptor.getNestedTypes().get(0);
    internal_static_vector_tile_Tile_Value_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_vector_tile_Tile_Value_descriptor,
        new java.lang.String[] { "StringValue", "FloatValue", "DoubleValue", "IntValue", "UintValue", "SintValue", "BoolValue", });
    internal_static_vector_tile_Tile_Feature_descriptor =
      internal_static_vector_tile_Tile_descriptor.getNestedTypes().get(1);
    internal_static_vector_tile_Tile_Feature_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_vector_tile_Tile_Feature_descriptor,
        new java.lang.String[] { "Id", "Tags", "Type", "Geometry", });
    internal_static_vector_tile_Tile_Layer_descriptor =
      internal_static_vector_tile_Tile_descriptor.getNestedTypes().get(2);
    internal_static_vector_tile_Tile_Layer_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_vector_tile_Tile_Layer_descriptor,
        new java.lang.String[] { "Version", "Name", "Features", "Keys", "Values", "Extent", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
